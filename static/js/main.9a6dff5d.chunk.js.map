{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","api/auth-api.ts","store/auth-reducer.ts","store/app-reducer.ts","utils/error-handlers.ts","store/todolists-reducer.ts","store/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","components/CustomAppBar/CustomAppBar.tsx","components/Login/Login.tsx","components/Loader/Loader.tsx","app/App.tsx","store/store.ts","index.tsx","components/Login/Login.module.css","features/TodolistsList/Todolist/Todolist.module.css","components/CustomAppBar/CustomAppBar.module.css","components/Loader/Loader.module.css"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todoListsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","email","password","rememberMe","initialState","isLoggedIn","setIsLoggedIn","type","status","error","isInitialized","setAppStatusAC","setIsInitializedAC","setAppErrorAC","serverErrorHandler","dispatch","message","setTodoListStatusAC","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","action","updateTaskAC","catch","e","AddItemForm","React","memo","props","console","log","useState","setTitle","setError","addButtonStyle","disabled","color","addItem","trim","TextField","variant","value","onChange","currentTarget","onKeyPress","charCode","label","helperText","IconButton","style","onClick","AddBox","fontSize","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","listStatus","deleteButtonStyle","checkboxStyle","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","s","taskContainer","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","tl","res","setTasksAC","data","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodoList","filter","textAlign","removeTodolist","tasksContainer","map","paddingTop","Button","TodoLists","todoLists","useSelector","state","auth","removeTaskAC","removeTaskTC","resultCode","item","addTaskAC","messages","length","addTaskTC","changeStatus","newTitle","changeTodoListTitleAC","changeTodoListTitleTC","addTodolist","todolist","addTodoListTC","Grid","container","padding","spacing","allTodolistTasks","Paper","elevation","backgroundColor","to","Alert","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","CustomAppBar","logout","a","anchorEl","setAnchorEl","Boolean","AppBar","position","background","Toolbar","appMenu","edge","aria-label","KeyboardArrowDown","aria-controls","aria-haspopup","aria-expanded","undefined","Menu","MenuListProps","MenuItem","href","menuLink","Typography","Login","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","login","logIn","resetForm","display","justifyContent","loginContainer","handleSubmit","formItem","htmlFor","placeholder","touched","name","free","target","Loader","ldsCircle","App","response","LinearProgress","Container","fixed","exact","path","render","from","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.9a6dff5d.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '4f348a4d-b27b-44e2-b016-551b13e8fd56'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todoListsAPI = {\r\n    getTodoLists() {\r\n        return instance.get<TodoListType[]>('todo-lists');\r\n    },\r\n    createTodoList(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodoList(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodoList(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fd7ee122-ff59-4cee-b5b0-6226ee5b433c'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post('auth/login', {email: email, password: password, rememberMe: rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/login')\r\n    },\r\n    authMe() {\r\n        return instance.get(`auth/me`)\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\ntype InitStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitStateType = initialState, action: ActionsType): InitStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setIsLoggedIn = (isLoggedIn: boolean) => ({type: 'AUTH/SET-IS-LOGGED-IN', isLoggedIn} as const)\r\n\r\n//thunk\r\nexport const logOut = () => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const logout = await authAPI.logout()\r\n    if (logout.data.resultCode === 0) {\r\n        dispatch(setIsLoggedIn(false))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } else {\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\nexport const logIn = (values: UserLoginData) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const login = await authAPI.login(values.email,values.password,values.rememberMe)\r\n    if (login.data.resultCode === 0) {\r\n        dispatch(setIsLoggedIn(true))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } else {\r\n        dispatch(setAppErrorAC(login.data.messages[0]))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\n//types\r\ntype ActionsType = ReturnType<typeof setIsLoggedIn>\r\n\r\nexport type UserLoginData = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {setIsLoggedIn} from \"./auth-reducer\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as null | string,\r\n    isInitialized: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-IS-INITIALIZED', isInitialized} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\n\r\n//thunk\r\nexport const authMe = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await authAPI.authMe()\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn(true))\r\n        } else {\r\n            dispatch(setAppErrorAC(response.data.messages[0]))\r\n        }\r\n        dispatch(setIsInitializedAC(true))\r\n    } catch (error) {\r\n        dispatch(setIsInitializedAC(true))\r\n    }\r\n}\r\n\r\n//types\r\nexport type SetAppStatusAT = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorAT = ReturnType<typeof setAppErrorAC>\r\n\r\ntype ActionsType =\r\n    SetAppStatusAT | SetAppErrorAT\r\n    | ReturnType<typeof setIsInitializedAC>\r\n","import {setAppErrorAC, SetAppErrorAT, setAppStatusAC, SetAppStatusAT} from \"../store/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const serverErrorHandler = (error: any, dispatch: Dispatch<SetAppStatusAT | SetAppErrorAT>) => {\r\n    dispatch(setAppStatusAC('failed'))\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n}","import {todoListsAPI, TodoListType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\nimport {serverErrorHandler} from \"../utils/error-handlers\";\r\n\r\nconst initialState: Array<TodoListDomainType> = []\r\n\r\nexport const todoListsReducer = (state: Array<TodoListDomainType> = initialState, action: ActionsType): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', status: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLIST-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, status: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todoLists.map(tl => ({...tl, filter: 'all', status: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodoListAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodoListAC = (todolist: TodoListType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodoListTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodoListFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodoListStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'SET-TODOLIST-STATUS',\r\n    id,\r\n    status\r\n} as const)\r\nexport const setTodoListsAC = (todoLists: Array<TodoListType>) => ({type: 'SET-TODOLISTS', todoLists} as const)\r\n\r\n// thunks\r\nexport const fetchTodoListsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todoListsAPI.getTodoLists()\r\n            .then((res) => {\r\n                dispatch(setTodoListsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((e) => {\r\n                serverErrorHandler(e,dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodoListTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(setTodoListStatusAC(todolistId,'loading'))\r\n        todoListsAPI.deleteTodoList(todolistId)\r\n            .then(() => {\r\n                dispatch(removeTodoListAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setTodoListStatusAC(todolistId,'succeeded'))\r\n            })\r\n            .catch((e) => {\r\n                serverErrorHandler(e,dispatch)\r\n                dispatch(setTodoListStatusAC(todolistId,'failed'))\r\n            })\r\n    }\r\n}\r\nexport const addTodoListTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todoListsAPI.createTodoList(title)\r\n            .then((res) => {\r\n                dispatch(addTodoListAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((e) => {\r\n                serverErrorHandler(e,dispatch)\r\n            })\r\n    }\r\n}\r\nexport const changeTodoListTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(setTodoListStatusAC(id,'loading'))\r\n        todoListsAPI.updateTodoList(id, title)\r\n            .then(() => {\r\n                dispatch(changeTodoListTitleAC(id, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setTodoListStatusAC(id,'succeeded'))\r\n            })\r\n            .catch((e) => {\r\n                serverErrorHandler(e,dispatch)\r\n                dispatch(setTodoListStatusAC(id,'failed'))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodoListActionType = ReturnType<typeof addTodoListAC>\r\nexport type RemoveTodoListActionType = ReturnType<typeof removeTodoListAC>\r\nexport type SetTodoListsActionType = ReturnType<typeof setTodoListsAC>\r\nexport type SetTodoStatusAT = ReturnType<typeof setTodoListStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodoListDomainType = TodoListType & {\r\n    status: RequestStatusType\r\n    filter: FilterValuesType\r\n}\r\ntype ActionsType =\r\n    | RemoveTodoListActionType\r\n    | AddTodoListActionType\r\n    | ReturnType<typeof changeTodoListTitleAC>\r\n    | ReturnType<typeof changeTodoListFilterAC>\r\n    | SetTodoListsActionType\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | SetTodoStatusAT\r\n\r\n\r\n","import {\r\n    AddTodoListActionType,\r\n    RemoveTodoListActionType,\r\n    SetTodoListsActionType,\r\n    setTodoListStatusAC\r\n} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todoListsAPI, UpdateTaskModelType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from './store'\r\nimport {setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\nimport {serverErrorHandler} from \"../utils/error-handlers\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todoLists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todoListsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC(tasks, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((e) => {\r\n            serverErrorHandler(e, dispatch)\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(setTodoListStatusAC(todolistId, 'loading'))\r\n    todoListsAPI.deleteTask(todolistId, taskId)\r\n        .then(() => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setTodoListStatusAC(todolistId, 'succeeded'))\r\n        })\r\n        .catch((e) => {\r\n            serverErrorHandler(e, dispatch)\r\n            dispatch(setTodoListStatusAC(todolistId, 'failed'))\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(setTodoListStatusAC(todolistId, 'loading'))\r\n    todoListsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setTodoListStatusAC(todolistId, 'succeeded'))\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    serverErrorHandler(res.data.messages[0], dispatch)\r\n                    dispatch(setTodoListStatusAC(todolistId, 'failed'))\r\n                }\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            serverErrorHandler(e,dispatch)\r\n            dispatch(setTodoListStatusAC(todolistId, 'failed'))\r\n        })\r\n}\r\n\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(setTodoListStatusAC(todolistId, 'loading'))\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            dispatch(setAppErrorAC('task not found'))\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todoListsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(() => {\r\n                const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                dispatch(action)\r\n            })\r\n            .catch((e) => {\r\n                serverErrorHandler(e, dispatch)\r\n            })\r\n        dispatch(setAppStatusAC('succeeded'))\r\n        dispatch(setTodoListStatusAC(todolistId, 'succeeded'))\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodoListActionType\r\n    | RemoveTodoListActionType\r\n    | SetTodoListsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setTodoListStatusAC>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport { IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    const [title, setTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addButtonStyle = props.disabled ? {color: 'grey'} : {color: 'green'}\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton style={addButtonStyle} onClick={addItem} disabled={props.disabled}>\r\n            <AddBox fontSize='large'/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\nimport {RequestStatusType} from \"../../../../store/app-reducer\";\r\nimport s from '../Todolist.module.css'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    listStatus: RequestStatusType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n    const disabled = props.listStatus === 'loading'\r\n    const deleteButtonStyle = disabled ? {color: 'grey'} : {color: 'darkred'}\r\n    const checkboxStyle = disabled ? {color: 'grey'} : {color: 'green'}\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={s.taskContainer}>\r\n        <span>\r\n            <Checkbox\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                style={checkboxStyle}\r\n                onChange={onChangeHandler}\r\n                disabled={disabled}\r\n            />\r\n\r\n            <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        </span>\r\n\r\n        <IconButton onClick={onClickHandler}\r\n                    disabled={disabled}\r\n                    style={deleteButtonStyle}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodoListDomainType} from '../../../store/todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../../../store/tasks-reducer'\r\nimport s from './Todolist.module.css'\r\n\r\ntype PropsType = {\r\n    tl: TodoListDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.tl.id)\r\n        dispatch(thunk)\r\n    }, [dispatch, props.tl.id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.tl.id)\r\n    }, [props.addTask, props.tl.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.tl.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.tl.id, title)\r\n    }, [props.tl.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.tl.id), [props.tl.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.tl.id), [props.tl.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.tl.id), [props.tl.id, props.changeFilter])\r\n\r\n    const disabled = props.tl.status === 'loading'\r\n    const deleteButtonStyle = disabled ? {color: 'grey'} : {color: 'darkred'}\r\n\r\n    let tasksForTodoList = props.tasks\r\n\r\n    if (props.tl.filter === 'active') {\r\n        tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.tl.filter === 'completed') {\r\n        tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3 style={{textAlign: 'center'}}>\r\n            <EditableSpan value={props.tl.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}\r\n                        disabled={disabled}\r\n                        style={deleteButtonStyle}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={disabled}/>\r\n        <div className={s.tasksContainer}>\r\n            {\r\n                tasksForTodoList.map(t => <Task key={t.id} task={t} todolistId={props.tl.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                                                listStatus={props.tl.status && props.tl.status}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.tl.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n                    disabled={disabled}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.tl.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}\r\n                    disabled={disabled}\r\n            >Active\r\n            </Button>\r\n            <Button variant={props.tl.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}\r\n                    disabled={disabled}\r\n            >Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../store/store'\r\nimport {\r\n    addTodoListTC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleTC,\r\n    fetchTodoListsTC,\r\n    FilterValuesType,\r\n    removeTodoListTC, TodoListDomainType,\r\n} from '../../store/todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from '../../store/tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const TodoLists: React.FC = () => {\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTodoListsTC()\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch,])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodoListFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodoListTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodoListTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodoListTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist} disabled={false}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todoLists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper elevation={10}\r\n                               style={{padding: '10px', backgroundColor: 'rgba(255,255,255,0.6)'}}>\r\n                            <Todolist\r\n                                tl={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {setAppErrorAC} from \"../../store/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n //   const [open, setOpen] = React.useState(true)\r\n    const dispatch = useDispatch()\r\n\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n  //      setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\n","import {AppBar, Button, IconButton, Menu, MenuItem, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {KeyboardArrowDown} from \"@material-ui/icons\";\r\nimport React, {useCallback} from \"react\";\r\nimport s from './CustomAppBar.module.css'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {logOut} from \"../../store/auth-reducer\";\r\n\r\n\r\nexport const CustomAppBar = (props: CustomAppBarPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const logout = useCallback(() => {\r\n        dispatch(logOut())\r\n    }, [dispatch])\r\n\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const open = Boolean(anchorEl);\r\n    const handleClick = (e: any) => {\r\n        setAnchorEl(e.currentTarget && e.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return <AppBar position=\"static\" style={{background: 'green'}}>\r\n        <Toolbar className={s.appMenu}>\r\n            <div>\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                <KeyboardArrowDown id=\"basic-button\"\r\n                                   aria-controls=\"basic-menu\"\r\n                                   aria-haspopup=\"true\"\r\n                                   aria-expanded={open ? 'true' : undefined}\r\n                                   onClick={handleClick}/>\r\n                <Menu\r\n                    id=\"basic-menu\"\r\n                    anchorEl={anchorEl}\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    MenuListProps={{\r\n                        'aria-labelledby': 'basic-button',\r\n                    }}\r\n                >\r\n                    <MenuItem >\r\n                        <a href='/' className={s.menuLink}>{`My Todo-lists`}</a></MenuItem>\r\n\r\n                </Menu>\r\n            </IconButton>\r\n            </div>\r\n            <Typography variant=\"h5\">\r\n                {'Todo-lists'}\r\n            </Typography>\r\n            {props.isLoggedIn\r\n                ? <Button color={\"inherit\"} variant={\"outlined\"} onClick={logout}>\r\n                    Log out\r\n                </Button>\r\n                : <div></div>}\r\n        </Toolbar>\r\n    </AppBar>\r\n}\r\n\r\ntype CustomAppBarPropsType = {\r\n    isLoggedIn: boolean\r\n}\r\n","import React from \"react\";\r\nimport {Button, Checkbox, Paper} from \"@material-ui/core\";\r\nimport {Field, FormikProvider, useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {logIn} from \"../../store/auth-reducer\";\r\nimport s from './Login.module.css'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const {isLoggedIn} = useSelector((state: AppRootStateType) => state.auth)\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: LoginErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(logIn(values))\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n    return (\r\n        <FormikProvider value={formik}>\r\n            <div style={{display: \"flex\",justifyContent: \"space-around\"}}>\r\n                <Paper className={s.loginContainer}\r\n                       elevation={10}>\r\n                    <h2 style={{color: 'darkGreen'}}> Login </h2>\r\n\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <div className={s.formItem}>\r\n                            <label htmlFor=\"email\">Email</label><br/>\r\n                            <Field\r\n                                type='email'\r\n                                placeholder='E-mail'\r\n                                error={formik.touched.email ? formik.errors.email : null}\r\n                                name='email'\r\n                            /></div>\r\n                        <div className={s.formItem}>\r\n                            <label htmlFor=\"password\">Password</label><br/>\r\n                            <Field\r\n                                type='password'\r\n                                placeholder='Password'\r\n                                error={formik.touched.password ? formik.errors.password : null}\r\n                                name={'password'}\r\n                            /></div>\r\n\r\n                        <div>\r\n                            <Checkbox name='rememberMe' style={{color: 'green'}}/>\r\n                            Remember me\r\n                        </div>\r\n\r\n                        <Button type='submit' style={{color: 'green'}} variant='outlined'>\r\n                            Login\r\n                        </Button>\r\n\r\n                        <div className={s.free}>\r\n                            To log in get registered <a href='https://social-network.samuraijs.com/' target='_blank'>here</a><br/>\r\n                            or use common test account credentials: <br/>\r\n                            Email: <span style={{color: 'black'}}>free@samuraijs.com</span> <br/>\r\n                            Password: <span style={{color: 'black'}}>free</span>\r\n                        </div>\r\n\r\n                    </form>\r\n                </Paper>\r\n            </div>\r\n        </FormikProvider>\r\n    )\r\n}\r\n\r\n\r\ntype LoginErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}","import React from \"react\";\r\nimport s from './Loader.module.css';\r\n\r\nexport const Loader = () => {\r\n    return <div className={s.ldsCircle}>\r\n        <div></div>\r\n    </div>\r\n}","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {Container, LinearProgress} from '@material-ui/core'\r\nimport {TodoLists} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../store/store\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {CustomAppBar} from \"../components/CustomAppBar/CustomAppBar\";\r\nimport {authMe} from \"../store/app-reducer\";\r\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from \"../components/Login/Login\";\r\nimport {Loader} from \"../components/Loader/Loader\";\r\n\r\nfunction App() {\r\n\r\n    const {status, isInitialized} = useSelector((state: AppRootStateType) => state.app)\r\n    const isLoggedIn = useSelector((state: AppRootStateType) => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(authMe())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <Loader />\r\n    } else {\r\n        return (\r\n            <div className=\"App\">\r\n\r\n                <CustomAppBar isLoggedIn={isLoggedIn}/>\r\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n\r\n                    <Container fixed>\r\n                        <HashRouter>\r\n                            <Switch>\r\n                                <Route exact path={\"/\"} render={() => <TodoLists/>}/>\r\n                                <Route path={\"/login\"} render={() => <Login/>}/>\r\n                                <Route path={\"/404\"} render={() =>\r\n                                    <h1 style={{textAlign: 'center', color: 'darkred', paddingTop: '100px'}}>404 Error</h1>}/>\r\n                                <Redirect from={\"*\"} to={\"/404\"}/>\r\n                            </Switch>\r\n                        </HashRouter>\r\n                    </Container>\r\n\r\n\r\n                <ErrorSnackbar/>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todoListsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './store/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"Login_loginContainer__3lCCv\",\"formItem\":\"Login_formItem__QWWIz\",\"free\":\"Login_free__g0Kth\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tasksContainer\":\"Todolist_tasksContainer__2Kisn\",\"taskContainer\":\"Todolist_taskContainer__wGU3P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appMenu\":\"CustomAppBar_appMenu__NS_Tb\",\"menuLink\":\"CustomAppBar_menuLink__32fsN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsCircle\":\"Loader_ldsCircle__3Ja2e\"};"],"sourceRoot":""}