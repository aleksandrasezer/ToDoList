{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","ToDoList.tsx","store/todolists-reducer.tsx","store/tasks-reducer.tsx","AppWithRedux.tsx","store/redux-store.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","onClickAddItem","trimmedTitle","trim","addItem","TextField","label","onBlur","variant","value","onChange","e","currentTarget","onKeyPress","key","helperText","AddBox","color","onClick","fontSize","EditableSpan","editMode","setEditMode","changeTitle","autoFocus","onDoubleClick","ToDoList","filter","tasksJSXElements","tasks","map","t","style","paddingLeft","listStyle","className","isDone","Checkbox","size","changeTaskStatus","id","checked","todoListId","newTitle","changeTaskTitle","IconButton","aria-label","removeTask","Delete","changeTodoListTitle","removeTodoList","addTask","Button","marginLeft","changeFilter","todoListId_1","v1","todoListId_2","initialState","AppWithRedux","useSelector","state","todoLists","dispatch","useDispatch","taskId","type","removeTaskAC","addTaskAC","newIsDoneValue","changeTaskStatusAC","changeTaskTitleAC","changeTodoListTitleAC","changeFilterAC","action","removeTodoListAC","getTasksForTodoList","todoListsComponents","tl","Grid","item","Paper","elevation","padding","AppBar","position","Toolbar","Menu","Typography","Container","fixed","container","addTodoListAC","spacing","reducers","combineReducers","newTask","stateCopy","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c13bc69c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    const onClickAddItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n            setError(false)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            onClickAddItem()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                label={'Title'}\r\n                onBlur={() => setError(false)}\r\n                variant={'outlined'}\r\n                error={error}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n                helperText={error && 'Title is required'}\r\n            />\r\n\r\n            <AddBox color={'primary'}\r\n                    onClick={onClickAddItem}\r\n                    fontSize={'large'}/>\r\n        </div>\r\n    )\r\n}\r\n","import { TextField } from \"@material-ui/core\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                value={title}\r\n                label={'Title'}\r\n                onChange={onChangeTitle}\r\n                onBlur={offEditMode}\r\n                autoFocus/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype ToDoListPropsType = {\r\n    todoListId: string\r\n    title: string,\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    addTask: (title: string, todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void //ФУНКЦИЯ\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void //ФУНКЦИЯ\r\n    changeTaskStatus: (taskId: string, newIsDoneValue: boolean, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListId: string) => void\r\n    changeTodoListTitle: (todoListId: string, newTitle: string) => void\r\n}\r\n\r\nfunction ToDoList(props: ToDoListPropsType) {\r\n    const {filter} = props\r\n    const tasksJSXElements = props.tasks.map(t => {\r\n        const removeTask = () => {\r\n            props.removeTask(t.id, props.todoListId)\r\n        }\r\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n            props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListId)\r\n        const changeTaskTitle = (newTitle: string) => {\r\n            props.changeTaskTitle(t.id,newTitle,props.todoListId)\r\n        }\r\n\r\n        return (\r\n            <li key={t.id} style={{paddingLeft: '0px', listStyle: 'none'}}>\r\n                <span className = {t.isDone ? \"isDone\" : \"\"}>\r\n\r\n                <Checkbox size={'small'}\r\n                color={'primary'}\r\n                    onChange={changeTaskStatus}\r\n                    checked={t.isDone}/>\r\n\r\n                <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n                </span>\r\n                <IconButton aria-label=\"delete\"\r\n                    size={'small'}\r\n                    onClick={removeTask}>\r\n                         <Delete/></IconButton>\r\n            </li>\r\n        )\r\n    })\r\n\r\n\r\n    const onClickAllFilter = () => props.changeFilter('all', props.todoListId)\r\n    const onClickActiveFilter = () => props.changeFilter('active', props.todoListId)\r\n    const onClickCompletedFilter = () => props.changeFilter('completed', props.todoListId)\r\n    const onClickRemoveTodoList = () => props.removeTodoList(props.todoListId)\r\n    const addTask = (title: string) => props.addTask(title, props.todoListId)\r\n    const changeTodoListTitleCallBack = (newTitle: string) => {\r\n        props.changeTodoListTitle(props.todoListId, newTitle)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title}  changeTitle={changeTodoListTitleCallBack} /> {/*{props.title} */}\r\n            <IconButton \r\n            onClick={onClickRemoveTodoList} \r\n            aria-label=\"delete\"\r\n            size={'small'}><Delete/></IconButton> </h3>\r\n            <AddItemForm addItem={addTask} />\r\n            <ul>\r\n                {tasksJSXElements}\r\n            </ul>\r\n            <div>\r\n                <Button \r\n                    style={{marginLeft: '3px'}}\r\n                    size={'small'}\r\n                    variant={filter === \"all\" ? \"outlined\" : \"contained\"}\r\n                    color={'primary'}\r\n                    onClick={onClickAllFilter}>All</Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    size={'small'}\r\n                    variant={filter === \"active\" ? \"outlined\" : \"contained\"}\r\n                    color={'primary'}\r\n                    onClick={onClickActiveFilter}>Active</Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    size={'small'}\r\n                    variant={filter === \"completed\" ? \"outlined\" : \"contained\"}\r\n                    color={'primary'}\r\n                    onClick={onClickCompletedFilter}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoList;","import {FilterValuesType, ToDoListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type TodoListsActionType = RemoveTodoListAT | AddTodoListAT | ChangeTodoListTitleAT | ChangeFilterAT\r\n\r\nexport type RemoveTodoListAT = {\r\n    type: 'REMOVE_TODOLIST'\r\n    todoListId: string\r\n}\r\nexport type AddTodoListAT = {\r\n    type: 'ADD_TODOLIST'\r\n    title: string\r\n    todoListId: string\r\n}\r\ntype ChangeTodoListTitleAT ={\r\n    type: 'CHANGE_TODOLIST_TITLE'\r\n    todoListId: string\r\n    newTitle: string\r\n}\r\ntype ChangeFilterAT = {\r\n    type: 'CHANGE_FILTER'\r\n    value: FilterValuesType\r\n    todoListId: string\r\n}\r\n\r\nexport const todoListId_1 = v1()\r\nexport const todoListId_2 = v1()\r\n\r\nconst initialState: ToDoListType[] = [\r\n    {id: todoListId_1, title: \"What to learn\", filter: 'all'},\r\n    {id: todoListId_2, title: \"What to buy\", filter: 'all'}\r\n]\r\n\r\n\r\nexport const todoListsReducer =\r\n    (todoLists = initialState, action: TodoListsActionType): ToDoListType[] => {\r\n    switch (action.type) {\r\n        case 'REMOVE_TODOLIST':\r\n            return todoLists.filter(tl => tl.id !== action.todoListId)\r\n        case 'ADD_TODOLIST':\r\n            return [...todoLists, {id: action.todoListId, title: action.title, filter: 'all'}]\r\n        case 'CHANGE_TODOLIST_TITLE':\r\n            return todoLists.map(tl => tl.id === action.todoListId ? {...tl, title: action.newTitle} : tl)\r\n        case 'CHANGE_FILTER':\r\n            return todoLists.map(tl => tl.id === action.todoListId ? {...tl, filter: action.value} : tl)\r\n        default:\r\n            return todoLists\r\n    }\r\n}\r\n\r\nexport const removeTodoListAC = (todoListId: string): RemoveTodoListAT => {\r\n    return {type: 'REMOVE_TODOLIST', todoListId: todoListId}\r\n}\r\nexport const addTodoListAC = (title: string):AddTodoListAT => {\r\n    return {type: 'ADD_TODOLIST', title: title, todoListId: v1()}\r\n}\r\nexport const changeTodoListTitleAC = (todoListId: string, newTitle: string): ChangeTodoListTitleAT => {\r\n    return {type: 'CHANGE_TODOLIST_TITLE', todoListId: todoListId, newTitle: newTitle}\r\n}\r\nexport const changeFilterAC = (value: FilterValuesType, todoListId: string): ChangeFilterAT => {\r\n    return {type: 'CHANGE_FILTER', todoListId: todoListId, value: value}\r\n}","import {TaskStateType, TaskType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoListAT, RemoveTodoListAT, todoListId_1, todoListId_2} from \"./todolists-reducer\";\r\n\r\nexport type TasksActionType = RemoveTaskAT | AddTaskAT |\r\n    ChangeTaskStatusAT | ChangeTaskTitleAT | AddTodoListAT |\r\n    RemoveTodoListAT\r\n\r\ntype RemoveTaskAT = {\r\n    type: 'REMOVE_TASK'\r\n    taskId: string\r\n    todoListId: string\r\n}\r\ntype AddTaskAT = {\r\n    type: 'ADD_TASK'\r\n    newTitle: string\r\n    todoListId: string\r\n}\r\ntype ChangeTaskStatusAT = {\r\n    type: 'CHANGE_TASK_STATUS'\r\n    taskId: string\r\n    newIsDoneValue: boolean\r\n    todoListId: string\r\n}\r\ntype ChangeTaskTitleAT = {\r\n    type: 'CHANGE_TASK_TITLE'\r\n    taskId: string\r\n    newTitle: string\r\n    todoListId: string\r\n\r\n}\r\n\r\nlet initialState: TaskStateType = {\r\n    [todoListId_1]: [\r\n        {id: v1(), title: \"HTML\", isDone: true},\r\n        {id: v1(), title: \"CSS\", isDone: true},\r\n        {id: v1(), title: \"React\", isDone: false},\r\n    ],\r\n    [todoListId_2]: [\r\n        {id: v1(), title: \"milk\", isDone: true},\r\n        {id: v1(), title: \"bread\", isDone: false},\r\n        {id: v1(), title: \"eggs\", isDone: false},\r\n    ]}\r\n\r\n\r\n\r\nexport const tasksReducer = (state = initialState, action: TasksActionType): TaskStateType => {\r\n        switch (action.type) {\r\n            case 'REMOVE_TASK':\r\n                return {...state, [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)}\r\n\r\n            case 'ADD_TASK':\r\n                const newTask: TaskType = {\r\n                    id: v1(),\r\n                    title: action.newTitle,\r\n                    isDone: false\r\n                }\r\n                return {...state, [action.todoListId]: [newTask, ...state[action.todoListId]]}\r\n\r\n            case 'CHANGE_TASK_STATUS':\r\n                return {...state, [action.todoListId]: state[action.todoListId].map(t =>\r\n                        t.id === action.taskId ? {...t, isDone: action.newIsDoneValue} : t)}\r\n\r\n            case 'CHANGE_TASK_TITLE':\r\n                return {...state, [action.todoListId]: state[action.todoListId].map(t =>\r\n                        t.id === action.taskId ? {...t, title: action.newTitle} : t)}\r\n\r\n            case 'ADD_TODOLIST':\r\n                return {...state, [action.todoListId]: []}\r\n\r\n            case 'REMOVE_TODOLIST':\r\n                const stateCopy = {...state}\r\n                delete stateCopy[action.todoListId]\r\n                return stateCopy\r\n\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string): RemoveTaskAT => {\r\n    return {\r\n        type: 'REMOVE_TASK',\r\n        taskId,\r\n        todoListId\r\n    }\r\n}\r\nexport const addTaskAC = (newTitle: string, todoListId: string): AddTaskAT => {\r\n    return {\r\n        type: 'ADD_TASK',\r\n        newTitle,\r\n        todoListId\r\n    }\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, newIsDoneValue: boolean, todoListId: string): ChangeTaskStatusAT => {\r\n    return {\r\n        type: 'CHANGE_TASK_STATUS',\r\n        taskId,\r\n        newIsDoneValue,\r\n        todoListId\r\n    }\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, newTitle: string, todoListId: string): ChangeTaskTitleAT => {\r\n    return {\r\n        type: 'CHANGE_TASK_TITLE',\r\n        taskId,\r\n        newTitle: newTitle,\r\n        todoListId\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport ToDoList from \"./ToDoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Container, Paper, Toolbar, IconButton, Typography, Grid} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodoListAC,\r\n    changeFilterAC,\r\n    changeTodoListTitleAC,\r\n    removeTodoListAC,\r\n} from \"./store/todolists-reducer\";\r\nimport {\r\n    addTaskAC,\r\n    changeTaskStatusAC,\r\n    changeTaskTitleAC,\r\n    removeTaskAC,\r\n} from \"./store/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"./store/redux-store\";\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type ToDoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const tasks = useSelector((state: RootState) => state.tasks)\r\n    const todoLists = useSelector((state: RootState) => state.todoLists)\r\n    const dispatch = useDispatch()\r\n\r\n  // Tasks functions:\r\n\r\n    function removeTask(taskId: string, todoListId: string) {\r\n        dispatch(removeTaskAC(taskId,todoListId))\r\n    }\r\n\r\n    function addTask(title: string, todoListId: string) {\r\n        dispatch(addTaskAC(title,todoListId))\r\n    }\r\n\r\n    function changeTaskStatus(taskId: string, newIsDoneValue: boolean, todoListId: string) {\r\n        dispatch(changeTaskStatusAC(taskId,newIsDoneValue,todoListId))\r\n    }\r\n\r\n    function changeTaskTitle(taskId: string, newTitle: string, todoListId: string) {\r\n        dispatch(changeTaskTitleAC(taskId,newTitle,todoListId))\r\n    }\r\n\r\n// Todolists functions:\r\n\r\n    const changeTodoListTitle = (todoListId: string, newTitle: string) => {\r\n        dispatch(changeTodoListTitleAC(todoListId, newTitle))\r\n    }\r\n\r\n        function changeFilter(value: FilterValuesType, todoListId: string) {\r\n            dispatch(changeFilterAC(value,todoListId))\r\n        }\r\n\r\n        function removeTodoList(todoListId: string) {\r\n        let action = removeTodoListAC(todoListId)\r\n            dispatch(action)\r\n            dispatch(action)\r\n        }\r\n\r\n        function addTodoList(title: string) {\r\n        let action = addTodoListAC(title)\r\n            dispatch(action)\r\n            dispatch(action)\r\n        }\r\n\r\n    //UI\r\n    function getTasksForTodoList(todoLists: ToDoListType) {\r\n        switch (todoLists.filter) {\r\n            case \"active\":\r\n                return tasks[todoLists.id].filter(t => !t.isDone)\r\n            case \"completed\":\r\n                return tasks[todoLists.id].filter(t => t.isDone)\r\n            default:\r\n                return tasks[todoLists.id]\r\n        }\r\n    }\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={3} style={{padding: '20px'}}>\r\n                    <ToDoList\r\n                        todoListId={tl.id}\r\n                        title={tl.title}\r\n                        tasks={getTasksForTodoList(tl)}\r\n                        filter={tl.filter}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}/>\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n//UI\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={'static'}>\r\n                <Toolbar>\r\n                    <IconButton color={'inherit'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h2'}>\r\n                        Todo-Lists\r\n                    </Typography>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoListsComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {todoListsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer,\r\n    }\r\n)\r\n\r\nexport const store = createStore(reducers)\r\n\r\nexport type StoreType = typeof store\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/redux-store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}