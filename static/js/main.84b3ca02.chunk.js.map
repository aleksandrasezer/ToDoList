{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","api/auth-api.ts","store/auth-reducer.ts","store/app-reducer.ts","store/todolists-reducer.ts","store/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","components/CustomAppBar/CustomAppBar.tsx","components/Login/Login.tsx","components/Loader/Loader.tsx","app/App.tsx","store/store.ts","index.tsx","components/Login/Login.module.css","components/CustomAppBar/CustomAppBar.module.css","components/Loader/Loader.module.css"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","email","password","rememberMe","initialState","isLoggedIn","setIsLoggedIn","type","status","error","isInitialized","setAppStatusAC","setIsInitializedAC","setAppErrorAC","setTodolistStatusAC","updateTaskTC","domainModel","dispatch","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","action","updateTaskAC","console","warn","AddItemForm","React","memo","props","log","useState","setTitle","setError","addButtonStyle","disabled","color","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","style","onClick","AddBox","fontSize","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","listStatus","deleteButtonStyle","checkboxStyle","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","tl","setTasksAC","data","items","catch","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","map","paddingTop","Button","TodoLists","todolists","useSelector","state","removeTaskAC","removeTaskTC","resultCode","item","addTaskAC","messages","length","addTaskTC","changeStatus","newTitle","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","todolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","CustomAppBar","logout","a","AppBar","position","background","Toolbar","s","appMenu","edge","aria-label","Menu","Typography","Login","auth","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","login","logIn","resetForm","display","justifyContent","loginContainer","handleSubmit","formItem","htmlFor","placeholder","touched","name","Loader","ldsCircle","App","response","LinearProgress","Container","fixed","exact","path","render","from","to","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.84b3ca02.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport {RequestStatusType} from \"../store/app-reducer\";\r\nimport {FilterValuesType} from \"../store/todolists-reducer\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fd7ee122-ff59-4cee-b5b0-6226ee5b433c'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n    status: RequestStatusType\r\n    filter: FilterValuesType\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fd7ee122-ff59-4cee-b5b0-6226ee5b433c'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post('auth/login', {email: email, password: password, rememberMe: rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/login')\r\n    },\r\n    authMe() {\r\n        return instance.get(`auth/me`)\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\ntype InitStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitStateType = initialState, action: ActionsType): InitStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setIsLoggedIn = (isLoggedIn: boolean) => ({type: 'AUTH/SET-IS-LOGGED-IN', isLoggedIn} as const)\r\n\r\n//thunk\r\nexport const logOut = () => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const logout = await authAPI.logout()\r\n    if (logout.data.resultCode === 0) {\r\n        dispatch(setIsLoggedIn(false))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } else {\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\nexport const logIn = (values: UserLoginData) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const login = await authAPI.login(values.email,values.password,values.rememberMe)\r\n    if (login.data.resultCode === 0) {\r\n        dispatch(setIsLoggedIn(true))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } else {\r\n        dispatch(setAppErrorAC(login.data.messages[0]))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\n//types\r\ntype ActionsType = ReturnType<typeof setIsLoggedIn>\r\n\r\nexport type UserLoginData = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {setIsLoggedIn} from \"./auth-reducer\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as null | string,\r\n    isInitialized: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const )\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-IS-INITIALIZED', isInitialized} as const )\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const )\r\n\r\n//thunk\r\nexport const authMe = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await authAPI.authMe()\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn(true))\r\n        } else {\r\n            dispatch(setAppErrorAC(response.data.messages[0]))\r\n        }\r\n        dispatch(setIsInitializedAC(true))\r\n    } catch (error) {\r\n        dispatch(setIsInitializedAC(true))\r\n    }\r\n}\r\n\r\ntype ActionsType =\r\n    ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setIsInitializedAC>\r\n","import {todolistsAPI, TodolistType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLIST-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, status: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'SET-TODOLIST-STATUS',\r\n    id,\r\n    status\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(() => {\r\n                dispatch(setAppStatusAC('failed'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(setTodolistStatusAC(todolistId,'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then(() => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setTodolistStatusAC(todolistId,'succeeded'))\r\n            })\r\n            .catch(() => {\r\n                dispatch(setTodolistStatusAC(todolistId,'failed'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(() => {\r\n                dispatch(setAppStatusAC('failed'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(setTodolistStatusAC(id,'loading'))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then(() => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setTodolistStatusAC(id,'succeeded'))\r\n            })\r\n            .catch(() => {\r\n                dispatch(setAppStatusAC('failed'))\r\n                dispatch(setTodolistStatusAC(id,'failed'))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setTodolistStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\n","import {\r\n    AddTodolistActionType,\r\n    RemoveTodolistActionType,\r\n    SetTodolistsActionType,\r\n    setTodolistStatusAC\r\n} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from './store'\r\nimport {setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC(tasks, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(() => {\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(setTodolistStatusAC(todolistId,'loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(() => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setTodolistStatusAC(todolistId,'succeeded'))\r\n        })\r\n        .catch(() => {\r\n            dispatch(setTodolistStatusAC(todolistId,'failed'))\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(setTodolistStatusAC(todolistId,'loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setTodolistStatusAC(todolistId,'succeeded'))\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppStatusAC('failed'))\r\n                    dispatch(setTodolistStatusAC(todolistId,'failed'))\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some error occurred'))\r\n                    dispatch(setTodolistStatusAC(todolistId,'failed'))\r\n                }\r\n\r\n            }\r\n        })\r\n}\r\n\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(setTodolistStatusAC(todolistId,'loading'))\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                dispatch(action)\r\n            })\r\n        dispatch(setAppStatusAC('succeeded'))\r\n        dispatch(setTodolistStatusAC(todolistId,'succeeded'))\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setTodolistStatusAC>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport { IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    const [title, setTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addButtonStyle = props.disabled ? {color: 'grey'} : {color: 'green'}\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton style={addButtonStyle} onClick={addItem} disabled={props.disabled}>\r\n            <AddBox fontSize='large'/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\nimport {RequestStatusType} from \"../../../../store/app-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    listStatus: RequestStatusType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n    const disabled = props.listStatus === 'loading'\r\n    const deleteButtonStyle = disabled ? {color: 'grey'} : {color: 'darkred'}\r\n    const checkboxStyle = disabled ? {color: 'grey'} : {color: 'green'}\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            style={checkboxStyle}\r\n            onChange={onChangeHandler}\r\n            disabled={disabled}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}\r\n                    disabled={disabled}\r\n                    style={deleteButtonStyle}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType, TodolistType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../../../store/todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../../../store/tasks-reducer'\r\n\r\ntype PropsType = {\r\n    tl: TodolistType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.tl.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.tl.id)\r\n    }, [props.addTask, props.tl.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.tl.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.tl.id, title)\r\n    }, [props.tl.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.tl.id), [props.tl.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.tl.id), [props.tl.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.tl.id), [props.tl.id, props.changeFilter])\r\n\r\n    const disabled = props.tl.status === 'loading'\r\n    const deleteButtonStyle = disabled ? {color: 'grey'} : {color: 'darkred'}\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.tl.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.tl.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.tl.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}\r\n                        disabled={disabled}\r\n                        style={deleteButtonStyle}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={disabled}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.tl.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                                                listStatus={props.tl.status}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.tl.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n                    disabled={disabled}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.tl.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}\r\n                    disabled={disabled}\r\n            >Active\r\n            </Button>\r\n            <Button variant={props.tl.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}\r\n                    disabled={disabled}\r\n            >Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../store/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n} from '../../store/todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from '../../store/tasks-reducer'\r\nimport {TaskStatuses, TodolistType} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\n\r\nexport const TodoLists: React.FC = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist} disabled={false}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                tl={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {setAppErrorAC} from \"../../store/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n //   const [open, setOpen] = React.useState(true)\r\n    const dispatch = useDispatch()\r\n\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n  //      setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\n","import {AppBar, Button, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport React, {useCallback} from \"react\";\r\nimport s from './CustomAppBar.module.css'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {logOut} from \"../../store/auth-reducer\";\r\n\r\n\r\nexport const CustomAppBar = (props: CustomAppBarPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const logout = useCallback(() => {\r\n        dispatch(logOut())\r\n    }, [])\r\n\r\n    return <AppBar position=\"static\" style={{background: 'green'}}>\r\n        <Toolbar className={s.appMenu}>\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                <Menu/>\r\n            </IconButton>\r\n            <Typography variant=\"h6\">\r\n                {'Todo-lists'}\r\n            </Typography>\r\n            {props.isLoggedIn\r\n                ? <Button color={\"inherit\"} variant={\"outlined\"} onClick={logout}>\r\n                    Log out\r\n                </Button>\r\n                : <div></div>}\r\n        </Toolbar>\r\n    </AppBar>\r\n}\r\n\r\ntype CustomAppBarPropsType = {\r\n    isLoggedIn: boolean\r\n}\r\n","import React from \"react\";\r\nimport {Button, Checkbox, Paper} from \"@material-ui/core\";\r\nimport {Field, FormikProvider, useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {TodoLists} from \"../../features/TodolistsList/TodolistsList\";\r\nimport {logIn} from \"../../store/auth-reducer\";\r\nimport s from './Login.module.css'\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const {isLoggedIn} = useSelector((state: AppRootStateType) => state.auth)\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: LoginErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(logIn(values))\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <TodoLists/>\r\n    }\r\n    return (\r\n        <FormikProvider value={formik}>\r\n            <div style={{display: \"flex\",justifyContent: \"space-around\"}}>\r\n                <Paper style={{padding: '80px'}} className={s.loginContainer}>\r\n                    <h2 style={{color: 'darkGreen'}}> Login </h2>\r\n\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <div className={s.formItem}>\r\n                            <label htmlFor=\"email\">Email</label><br/>\r\n                            <Field\r\n                                type='email'\r\n                                placeholder='E-mail'\r\n                                error={formik.touched.email ? formik.errors.email : null}\r\n                                name='email'\r\n                            /></div>\r\n                        <div className={s.formItem}>\r\n                            <label htmlFor=\"password\">Password</label><br/>\r\n                            <Field\r\n                                type='password'\r\n                                placeholder='Password'\r\n                                error={formik.touched.password ? formik.errors.password : null}\r\n                                name={'password'}\r\n                            /></div>\r\n\r\n                        <div>\r\n                            <Checkbox name='rememberMe' style={{color: 'green'}}/>\r\n                            Remember me\r\n                        </div>\r\n\r\n                        <Button type='submit' style={{color: 'green'}} variant='outlined'>\r\n                            Login\r\n                        </Button>\r\n\r\n                    </form>\r\n                </Paper>\r\n            </div>\r\n        </FormikProvider>\r\n    )\r\n}\r\n\r\n\r\ntype LoginErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}","import React from \"react\";\r\nimport s from './Loader.module.css';\r\n\r\nexport const Loader = () => {\r\n    return <div className={s.ldsCircle}>\r\n        <div></div>\r\n    </div>\r\n}","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {Container, LinearProgress} from '@material-ui/core'\r\nimport {TodoLists} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../store/store\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {CustomAppBar} from \"../components/CustomAppBar/CustomAppBar\";\r\nimport {authMe} from \"../store/app-reducer\";\r\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from \"../components/Login/Login\";\r\nimport {Loader} from \"../components/Loader/Loader\";\r\n\r\nfunction App() {\r\n\r\n    const {status, isInitialized} = useSelector((state: AppRootStateType) => state.app)\r\n    const isLoggedIn = useSelector((state: AppRootStateType) => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(authMe())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <Loader />\r\n    } else {\r\n        return (\r\n            <div className=\"App\">\r\n\r\n                <CustomAppBar isLoggedIn={isLoggedIn}/>\r\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n\r\n                {isLoggedIn ?\r\n                    <Container fixed>\r\n                        <HashRouter>\r\n                            <Switch>\r\n                                <Route exact path={\"/\"} render={() => <TodoLists/>}/>\r\n                                <Route path={\"/login\"} render={() => <Login/>}/>\r\n                                <Route path={\"/404\"} render={() => <h1>404 залупа</h1>}/>\r\n                                <Redirect from={\"*\"} to={\"/404\"}/>\r\n                            </Switch>\r\n                        </HashRouter>\r\n                    </Container>\r\n                    : <Login />\r\n                }\r\n\r\n                <ErrorSnackbar/>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './store/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"Login_loginContainer__3lCCv\",\"formItem\":\"Login_formItem__QWWIz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appMenu\":\"CustomAppBar_appMenu__NS_Tb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsCircle\":\"Loader_ldsCircle__3Ja2e\"};"],"sourceRoot":""}