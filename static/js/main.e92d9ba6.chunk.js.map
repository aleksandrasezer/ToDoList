{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","api/auth-api.ts","store/auth-reducer.ts","store/app-reducer.ts","store/todolists-reducer.ts","store/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","components/CustomAppBar/CustomAppBar.tsx","components/Login/Login.tsx","components/Loader/Loader.tsx","app/App.tsx","store/store.ts","index.tsx","components/Login/Login.module.css","components/CustomAppBar/CustomAppBar.module.css","components/Loader/Loader.module.css"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","email","password","rememberMe","initialState","isLoggedIn","setIsLoggedIn","type","status","error","isInitialized","setAppStatusAC","setIsInitializedAC","setAppErrorAC","updateTaskTC","domainModel","dispatch","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","action","updateTaskAC","console","warn","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","style","color","onClick","AddBox","fontSize","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","setTasksAC","data","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","map","paddingTop","Button","TodoLists","todolists","useSelector","state","catch","removeTaskAC","removeTaskTC","resultCode","item","addTaskAC","messages","length","addTaskTC","changeStatus","newTitle","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","todolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","CustomAppBar","logout","a","AppBar","position","background","Toolbar","s","appMenu","edge","aria-label","Menu","Typography","Login","auth","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","login","logIn","resetForm","display","justifyContent","loginContainer","handleSubmit","formItem","htmlFor","placeholder","touched","name","Loader","ldsCircle","App","response","LinearProgress","Container","fixed","exact","path","render","from","to","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.e92d9ba6.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fd7ee122-ff59-4cee-b5b0-6226ee5b433c'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fd7ee122-ff59-4cee-b5b0-6226ee5b433c'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post('auth/login', {email: email, password: password, rememberMe: rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/login')\r\n    },\r\n    authMe() {\r\n        return instance.get(`auth/me`)\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\ntype InitStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitStateType = initialState, action: ActionsType): InitStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setIsLoggedIn = (isLoggedIn: boolean) => ({type: 'AUTH/SET-IS-LOGGED-IN', isLoggedIn} as const)\r\n\r\n//thunk\r\nexport const logOut = () => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const logout = await authAPI.logout()\r\n    if (logout.data.resultCode === 0) {\r\n        dispatch(setIsLoggedIn(false))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } else {\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\nexport const logIn = (values: UserLoginData) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const login = await authAPI.login(values.email,values.password,values.rememberMe)\r\n    if (login.data.resultCode === 0) {\r\n        dispatch(setIsLoggedIn(true))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } else {\r\n        dispatch(setAppErrorAC(login.data.messages[0]))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\n//types\r\ntype ActionsType = ReturnType<typeof setIsLoggedIn>\r\n\r\nexport type UserLoginData = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {setIsLoggedIn} from \"./auth-reducer\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as null | string,\r\n    isInitialized: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const )\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-IS-INITIALIZED', isInitialized} as const )\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const )\r\n\r\n//thunk\r\nexport const authMe = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await authAPI.authMe()\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn(true))\r\n        } else {\r\n            dispatch(setAppErrorAC(response.data.messages[0]))\r\n        }\r\n        dispatch(setIsInitializedAC(true))\r\n    } catch (error) {\r\n        dispatch(setIsInitializedAC(true))\r\n    }\r\n}\r\n\r\ntype ActionsType =\r\n    ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setIsInitializedAC>\r\n","import {todolistsAPI, TodolistType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(e => {\r\n                dispatch(setAppStatusAC('failed'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from './store'\r\nimport {setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC(tasks, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppStatusAC('failed'))\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some error occurred'))\r\n                }\r\n\r\n            }\r\n        })\r\n}\r\n\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                dispatch(action)\r\n            })\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport { IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton style={{ color: 'green' }} onClick={addItem}>\r\n            <AddBox fontSize='large' />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            style={{ color: 'green'}}\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete style={{ color: 'darkred'}}/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../../../store/todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../../../store/tasks-reducer'\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete style={{ color: 'darkred' }}/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../store/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from '../../store/todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from '../../store/tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\n\r\nexport const TodoLists: React.FC = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {setAppErrorAC} from \"../../store/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n //   const [open, setOpen] = React.useState(true)\r\n    const dispatch = useDispatch()\r\n\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n  //      setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\n","import {AppBar, Button, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport React, {useCallback} from \"react\";\r\nimport s from './CustomAppBar.module.css'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {logOut} from \"../../store/auth-reducer\";\r\n\r\n\r\nexport const CustomAppBar = (props: CustomAppBarPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const logout = useCallback(() => {\r\n        dispatch(logOut())\r\n    }, [])\r\n\r\n    return <AppBar position=\"static\" style={{background: 'green'}}>\r\n        <Toolbar className={s.appMenu}>\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                <Menu/>\r\n            </IconButton>\r\n            <Typography variant=\"h6\">\r\n                {'Todo-lists'}\r\n            </Typography>\r\n            {props.isLoggedIn\r\n                ? <Button color={\"inherit\"} variant={\"outlined\"} onClick={logout}>\r\n                    Log out\r\n                </Button>\r\n                : <div></div>}\r\n        </Toolbar>\r\n    </AppBar>\r\n}\r\n\r\ntype CustomAppBarPropsType = {\r\n    isLoggedIn: boolean\r\n}\r\n","import React from \"react\";\r\nimport {Button, Checkbox, Paper} from \"@material-ui/core\";\r\nimport {Field, FormikProvider, useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {TodoLists} from \"../../features/TodolistsList/TodolistsList\";\r\nimport {logIn} from \"../../store/auth-reducer\";\r\nimport s from './Login.module.css'\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const {isLoggedIn} = useSelector((state: AppRootStateType) => state.auth)\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: LoginErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(logIn(values))\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <TodoLists/>\r\n    }\r\n    return (\r\n        <FormikProvider value={formik}>\r\n            <div style={{display: \"flex\",justifyContent: \"space-around\"}}>\r\n                <Paper style={{padding: '80px'}} className={s.loginContainer}>\r\n                    <h2 style={{color: 'darkGreen'}}> Login </h2>\r\n\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <div className={s.formItem}>\r\n                            <label htmlFor=\"email\">Email</label><br/>\r\n                            <Field\r\n                                type='email'\r\n                                placeholder='E-mail'\r\n                                error={formik.touched.email ? formik.errors.email : null}\r\n                                name='email'\r\n                            /></div>\r\n                        <div className={s.formItem}>\r\n                            <label htmlFor=\"password\">Password</label><br/>\r\n                            <Field\r\n                                type='password'\r\n                                placeholder='Password'\r\n                                error={formik.touched.password ? formik.errors.password : null}\r\n                                name={'password'}\r\n                            /></div>\r\n\r\n                        <div>\r\n                            <Checkbox name='rememberMe' style={{color: 'green'}}/>\r\n                            Remember me\r\n                        </div>\r\n\r\n                        <Button type='submit' style={{color: 'green'}} variant='outlined'>\r\n                            Login\r\n                        </Button>\r\n\r\n                    </form>\r\n                </Paper>\r\n            </div>\r\n        </FormikProvider>\r\n    )\r\n}\r\n\r\n\r\ntype LoginErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}","import React from \"react\";\r\nimport s from './Loader.module.css';\r\n\r\nexport const Loader = () => {\r\n    return <div className={s.ldsCircle}>\r\n        <div></div>\r\n    </div>\r\n}","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {Container, LinearProgress} from '@material-ui/core'\r\nimport {TodoLists} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../store/store\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {CustomAppBar} from \"../components/CustomAppBar/CustomAppBar\";\r\nimport {authMe} from \"../store/app-reducer\";\r\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from \"../components/Login/Login\";\r\nimport {Loader} from \"../components/Loader/Loader\";\r\n\r\nfunction App() {\r\n\r\n    const {status, isInitialized} = useSelector((state: AppRootStateType) => state.app)\r\n    const isLoggedIn = useSelector((state: AppRootStateType) => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(authMe())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <Loader />\r\n    } else {\r\n        return (\r\n            <div className=\"App\">\r\n\r\n                <CustomAppBar isLoggedIn={isLoggedIn}/>\r\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n\r\n                {isLoggedIn ?\r\n                    <Container fixed>\r\n                        <HashRouter>\r\n                            <Switch>\r\n                                <Route exact path={\"/\"} render={() => <TodoLists/>}/>\r\n                                <Route path={\"/login\"} render={() => <Login/>}/>\r\n                                <Route path={\"/404\"} render={() => <h1>404 залупа</h1>}/>\r\n                                <Redirect from={\"*\"} to={\"/404\"}/>\r\n                            </Switch>\r\n                        </HashRouter>\r\n                    </Container>\r\n                    : <Login />\r\n                }\r\n\r\n                <ErrorSnackbar/>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './store/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"Login_loginContainer__3lCCv\",\"formItem\":\"Login_formItem__QWWIz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appMenu\":\"CustomAppBar_appMenu__NS_Tb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsCircle\":\"Loader_ldsCircle__3Ja2e\"};"],"sourceRoot":""}