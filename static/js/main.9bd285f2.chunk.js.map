{"version":3,"sources":["serviceWorker.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","components/Task.tsx","components/ToDoList.tsx","store/todolists-reducer.tsx","store/tasks-reducer.tsx","AppWithRedux.tsx","store/redux-store.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","onClickAddItem","trimmedTitle","trim","addItem","TextField","label","onBlur","variant","value","onChange","e","currentTarget","onKeyPress","key","helperText","AddBox","color","onClick","fontSize","EditableSpan","editMode","setEditMode","changeTitle","autoFocus","onDoubleClick","Task","removeTask","useCallback","taskId","todoListId","changeTaskStatus","checked","changeTaskTitle","newTitle","style","paddingLeft","listStyle","className","isDone","Checkbox","size","IconButton","aria-label","Delete","ToDoList","allTodoListTasks","tasks","tasksForTodo","filter","t","tasksJSXElements","map","id","addTask","onClickAllFilter","changeFilter","onClickActiveFilter","onClickCompletedFilter","onClickRemoveTodoList","removeTodoList","changeTodoListTitleCallBack","changeTodoListTitle","Button","marginLeft","todoListId_1","v1","todoListId_2","initialState","AppWithRedux","todoLists","useSelector","state","dispatch","useDispatch","type","removeTaskAC","addTaskAC","newIsDoneValue","changeTaskStatusAC","changeTaskTitleAC","changeTodoListTitleAC","changeFilterAC","action","removeTodoListAC","addTodoList","addTodoListAC","AppBar","position","Toolbar","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","allTodolistTasks","item","Paper","reducers","combineReducers","newTask","stateCopy","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9bd285f2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n\r\n    console.log('AddItemForm')\r\n\r\n    const [title, setTitle] = useState<string>(\"\")\r\n\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onClickAddItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n            setTitle('')\r\n        } else {\r\n            setError('title is required')\r\n        }\r\n    }\r\n\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            onClickAddItem()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                label={'Title'}\r\n                onBlur={() => setError(null)}\r\n                variant={'outlined'}\r\n                error={!!error}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n                helperText={error}\r\n            />\r\n\r\n            <AddBox color={'primary'}\r\n                    onClick={onClickAddItem}\r\n                    fontSize={'large'}/>\r\n        </div>\r\n    )\r\n})\r\n","import { TextField } from \"@material-ui/core\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function(props: EditableSpanPropsType) {\r\n\r\n    console.log('editable span')\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                value={title}\r\n                label={'Title'}\r\n                onChange={onChangeTitle}\r\n                onBlur={offEditMode}\r\n                autoFocus/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TaskPropsType = {\r\n    title: string\r\n    taskId: string\r\n    isDone: boolean\r\n    todoListId: string\r\n    addTask: (title: string, todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeTaskStatus: (taskId: string, newIsDoneValue: boolean, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListId: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    console.log('tasks')\r\n\r\n    const removeTask = useCallback(function() {\r\n        props.removeTask(props.taskId, props.todoListId)\r\n    }, [props])\r\n    const changeTaskStatus = useCallback(function(e: ChangeEvent<HTMLInputElement>)\r\n    {props.changeTaskStatus(props.taskId, e.currentTarget.checked, props.todoListId)}, [props.taskId, props.todoListId])\r\n\r\n    const changeTaskTitle = useCallback(function(newTitle: string) {\r\n        props.changeTaskTitle(props.taskId,newTitle,props.todoListId)}, [props.taskId, props.todoListId])\r\n\r\n\r\n    return (\r\n        <li key={props.taskId} style={{paddingLeft: '0px', listStyle: 'none'}}>\r\n                <span className = {props.isDone ? \"isDone\" : \"\"}>\r\n\r\n                <Checkbox size={'small'}\r\n                          color={'primary'}\r\n                          onChange={changeTaskStatus}\r\n                          checked={props.isDone}/>\r\n\r\n                <EditableSpan title={props.title} changeTitle={changeTaskTitle}/>\r\n                </span>\r\n            <IconButton aria-label=\"delete\"\r\n                        size={'small'}\r\n                        onClick={removeTask}>\r\n                <Delete/></IconButton>\r\n        </li>\r\n    )\r\n})","import React, {useCallback} from 'react';\r\n\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\nimport {FilterValuesType, TaskType} from \"../AppWithRedux\";\r\n\r\ntype ToDoListPropsType = {\r\n    todoListId: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string, todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeTaskStatus: (taskId: string, newIsDoneValue: boolean, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    changeTodoListTitle: (todoListId: string, newTitle: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n}\r\n\r\nexport const ToDoList = React.memo(function (props: ToDoListPropsType) {\r\n\r\n    console.log('todoList')\r\n\r\n\r\n\r\n    let allTodoListTasks = props.tasks\r\n    let tasksForTodo = allTodoListTasks\r\n\r\n    if (props.filter === 'active') tasksForTodo = allTodoListTasks.filter(t => !t.isDone)\r\n    if (props.filter === 'completed') tasksForTodo = allTodoListTasks.filter(t => t.isDone)\r\n\r\n    const {filter} = props\r\n    const tasksJSXElements = tasksForTodo.map(t => <Task key={t.id}\r\n                                                         title={t.title}\r\n                                                         taskId={t.id}\r\n                                                         isDone={t.isDone}\r\n                                                         todoListId={props.todoListId}\r\n                                                         addTask={props.addTask}\r\n                                                         removeTask={props.removeTask}\r\n                                                         changeTaskStatus={props.changeTaskStatus}\r\n                                                         changeTaskTitle={props.changeTaskTitle}/>)\r\n\r\n\r\n    const onClickAllFilter = useCallback(() =>\r\n        props.changeFilter('all', props.todoListId), [props.changeFilter, props.todoListId])\r\n\r\n    const onClickActiveFilter = useCallback(() =>\r\n        props.changeFilter('active', props.todoListId), [props.changeFilter, props.todoListId])\r\n\r\n    const onClickCompletedFilter = useCallback(() =>\r\n        props.changeFilter('completed', props.todoListId), [props.changeFilter, props.todoListId])\r\n\r\n    const onClickRemoveTodoList = useCallback(() =>\r\n        props.removeTodoList(props.todoListId), [props.removeTodoList,props.todoListId])\r\n\r\n    const addTask = useCallback((title: string) =>\r\n        props.addTask(title, props.todoListId), [props.addTask, props.todoListId])\r\n\r\n    const changeTodoListTitleCallBack = useCallback((newTitle: string) => {\r\n        props.changeTodoListTitle(props.todoListId, newTitle)\r\n    }, [props.changeTodoListTitle,props.todoListId])\r\n\r\n    return (\r\n        <div>\r\n\r\n            <h3><EditableSpan title={props.title} changeTitle={changeTodoListTitleCallBack}/>\r\n                <IconButton\r\n                    onClick={onClickRemoveTodoList}\r\n                    aria-label=\"delete\"\r\n                    size={'small'}><Delete/></IconButton>\r\n            </h3>\r\n\r\n            <AddItemForm addItem={addTask}/>\r\n\r\n            <ul>\r\n                {tasksJSXElements}\r\n            </ul>\r\n\r\n            <div>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    size={'small'}\r\n                    variant={filter === \"all\" ? \"outlined\" : \"contained\"}\r\n                    color={'primary'}\r\n                    onClick={onClickAllFilter}>All</Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    size={'small'}\r\n                    variant={filter === \"active\" ? \"outlined\" : \"contained\"}\r\n                    color={'primary'}\r\n                    onClick={onClickActiveFilter}>Active</Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    size={'small'}\r\n                    variant={filter === \"completed\" ? \"outlined\" : \"contained\"}\r\n                    color={'primary'}\r\n                    onClick={onClickCompletedFilter}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ToDoList;","\r\nimport {v1} from \"uuid\";\r\nimport { FilterValuesType, ToDoListType } from \"../AppWithRedux\";\r\n\r\nexport type TodoListsActionType = RemoveTodoListAT | AddTodoListAT | ChangeTodoListTitleAT | ChangeFilterAT\r\n\r\nexport type RemoveTodoListAT = {\r\n    type: 'REMOVE_TODOLIST'\r\n    todoListId: string\r\n}\r\nexport type AddTodoListAT = {\r\n    type: 'ADD_TODOLIST'\r\n    title: string\r\n    todoListId: string\r\n}\r\ntype ChangeTodoListTitleAT ={\r\n    type: 'CHANGE_TODOLIST_TITLE'\r\n    todoListId: string\r\n    newTitle: string\r\n}\r\ntype ChangeFilterAT = {\r\n    type: 'CHANGE_FILTER'\r\n    value: FilterValuesType\r\n    todoListId: string\r\n}\r\n\r\nexport const todoListId_1 = v1()\r\nexport const todoListId_2 = v1()\r\n\r\nconst initialState: ToDoListType[] = [\r\n    {id: todoListId_1, title: \"What to learn\", filter: 'all'},\r\n    {id: todoListId_2, title: \"What to buy\", filter: 'all'}\r\n]\r\n\r\n\r\nexport const todoListsReducer =\r\n    (todoLists = initialState, action: TodoListsActionType): ToDoListType[] => {\r\n    switch (action.type) {\r\n        case 'REMOVE_TODOLIST':\r\n            return todoLists.filter(tl => tl.id !== action.todoListId)\r\n        case 'ADD_TODOLIST':\r\n            return [...todoLists, {id: action.todoListId, title: action.title, filter: 'all'}]\r\n        case 'CHANGE_TODOLIST_TITLE':\r\n            return todoLists.map(tl => tl.id === action.todoListId ? {...tl, title: action.newTitle} : tl)\r\n        case 'CHANGE_FILTER':\r\n            return todoLists.map(tl => tl.id === action.todoListId ? {...tl, filter: action.value} : tl)\r\n        default:\r\n            return todoLists\r\n    }\r\n}\r\n\r\nexport const removeTodoListAC = (todoListId: string): RemoveTodoListAT => {\r\n    return {type: 'REMOVE_TODOLIST', todoListId: todoListId}\r\n}\r\nexport const addTodoListAC = (title: string):AddTodoListAT => {\r\n    return {type: 'ADD_TODOLIST', title: title, todoListId: v1()}\r\n}\r\nexport const changeTodoListTitleAC = (todoListId: string, newTitle: string): ChangeTodoListTitleAT => {\r\n    return {type: 'CHANGE_TODOLIST_TITLE', todoListId: todoListId, newTitle: newTitle}\r\n}\r\nexport const changeFilterAC = (value: FilterValuesType, todoListId: string): ChangeFilterAT => {\r\n    return {type: 'CHANGE_FILTER', todoListId: todoListId, value: value}\r\n}","import {v1} from \"uuid\";\r\nimport {AddTodoListAT, RemoveTodoListAT, todoListId_1, todoListId_2} from \"./todolists-reducer\";\r\nimport {TaskStateType, TaskType} from \"../AppWithRedux\";\r\n\r\nexport type TasksActionType = RemoveTaskAT | AddTaskAT |\r\n    ChangeTaskStatusAT | ChangeTaskTitleAT | AddTodoListAT |\r\n    RemoveTodoListAT\r\n\r\ntype RemoveTaskAT = {\r\n    type: 'REMOVE_TASK'\r\n    taskId: string\r\n    todoListId: string\r\n}\r\ntype AddTaskAT = {\r\n    type: 'ADD_TASK'\r\n    newTitle: string\r\n    todoListId: string\r\n}\r\ntype ChangeTaskStatusAT = {\r\n    type: 'CHANGE_TASK_STATUS'\r\n    taskId: string\r\n    newIsDoneValue: boolean\r\n    todoListId: string\r\n}\r\ntype ChangeTaskTitleAT = {\r\n    type: 'CHANGE_TASK_TITLE'\r\n    taskId: string\r\n    newTitle: string\r\n    todoListId: string\r\n\r\n}\r\n\r\nlet initialState: TaskStateType = {\r\n    [todoListId_1]: [\r\n        {id: v1(), title: \"HTML\", isDone: true},\r\n        {id: v1(), title: \"CSS\", isDone: true},\r\n        {id: v1(), title: \"React\", isDone: false},\r\n    ],\r\n    [todoListId_2]: [\r\n        {id: v1(), title: \"milk\", isDone: true},\r\n        {id: v1(), title: \"bread\", isDone: false},\r\n        {id: v1(), title: \"eggs\", isDone: false},\r\n    ]}\r\n\r\n\r\n\r\nexport const tasksReducer = (state = initialState, action: TasksActionType): TaskStateType => {\r\n        switch (action.type) {\r\n            case 'REMOVE_TASK':\r\n                return {...state, [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)}\r\n\r\n            case 'ADD_TASK':\r\n                const newTask: TaskType = {\r\n                    id: v1(),\r\n                    title: action.newTitle,\r\n                    isDone: false\r\n                }\r\n                return {...state, [action.todoListId]: [newTask, ...state[action.todoListId]]}\r\n\r\n            case 'CHANGE_TASK_STATUS':\r\n                return {...state, [action.todoListId]: state[action.todoListId].map(t =>\r\n                        t.id === action.taskId ? {...t, isDone: action.newIsDoneValue} : t)}\r\n\r\n            case 'CHANGE_TASK_TITLE':\r\n                return {...state, [action.todoListId]: state[action.todoListId].map(t =>\r\n                        t.id === action.taskId ? {...t, title: action.newTitle} : t)}\r\n\r\n            case 'ADD_TODOLIST':\r\n                return {...state, [action.todoListId]: []}\r\n\r\n            case 'REMOVE_TODOLIST':\r\n                const stateCopy = {...state}\r\n                delete stateCopy[action.todoListId]\r\n                return stateCopy\r\n\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string): RemoveTaskAT => {\r\n    return {\r\n        type: 'REMOVE_TASK',\r\n        taskId,\r\n        todoListId\r\n    }\r\n}\r\nexport const addTaskAC = (newTitle: string, todoListId: string): AddTaskAT => {\r\n    return {\r\n        type: 'ADD_TASK',\r\n        newTitle,\r\n        todoListId\r\n    }\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, newIsDoneValue: boolean, todoListId: string): ChangeTaskStatusAT => {\r\n    return {\r\n        type: 'CHANGE_TASK_STATUS',\r\n        taskId,\r\n        newIsDoneValue,\r\n        todoListId\r\n    }\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, newTitle: string, todoListId: string): ChangeTaskTitleAT => {\r\n    return {\r\n        type: 'CHANGE_TASK_TITLE',\r\n        taskId,\r\n        newTitle: newTitle,\r\n        todoListId\r\n    }\r\n}\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport ToDoList from \"./components/ToDoList\";\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {AppBar, Container, Paper, Toolbar, IconButton, Typography, Grid} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodoListAC,\r\n    changeFilterAC,\r\n    changeTodoListTitleAC,\r\n    removeTodoListAC,\r\n} from \"./store/todolists-reducer\";\r\nimport {\r\n    addTaskAC,\r\n    changeTaskStatusAC,\r\n    changeTaskTitleAC,\r\n    removeTaskAC,\r\n} from \"./store/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"./store/redux-store\";\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type ToDoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todoLists = useSelector((state: RootState) => state.todoLists)\r\n    const tasks = useSelector((state: RootState) => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n  // Tasks functions:\r\n    const removeTask = useCallback(function(taskId: string, todoListId: string) {\r\n        dispatch(removeTaskAC(taskId,todoListId))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function(title: string, todoListId: string) {\r\n        dispatch(addTaskAC(title,todoListId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback(function(taskId: string, newIsDoneValue: boolean, todoListId: string) {\r\n        dispatch(changeTaskStatusAC(taskId,newIsDoneValue,todoListId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function(taskId: string, newTitle: string, todoListId: string) {\r\n        dispatch(changeTaskTitleAC(taskId,newTitle,todoListId))\r\n    }, [dispatch])\r\n\r\n// Todolists functions:\r\n\r\n    const changeTodoListTitle = useCallback(function(todoListId: string, newTitle: string) {\r\n        dispatch(changeTodoListTitleAC(todoListId, newTitle))\r\n    }, [dispatch])\r\n\r\n    const  changeFilter = useCallback(function(value: FilterValuesType, todoListId: string) {\r\n            dispatch(changeFilterAC(value,todoListId))\r\n        }, [dispatch])\r\n\r\n    const  removeTodoList = useCallback(function(todoListId: string) {\r\n        let action = removeTodoListAC(todoListId)\r\n            dispatch(action)\r\n        }, [dispatch])\r\n\r\n    const  addTodoList = useCallback(function(title: string) {\r\n        let action = addTodoListAC(title)\r\n            dispatch(action)\r\n        }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={'static'}>\r\n                <Toolbar>\r\n                    <IconButton color={'inherit'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h2'}>\r\n                        Todo-Lists\r\n                    </Typography>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todoLists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <ToDoList\r\n                                        todoListId={tl.id}\r\n                                        title={tl.title}\r\n                                        filter={tl.filter}\r\n                                        addTask={addTask}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        changeTaskStatus={changeTaskStatus}\r\n                                        removeTodoList={removeTodoList}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodoListTitle={changeTodoListTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default AppWithRedux;","import {combineReducers, createStore} from \"redux\";\r\nimport {todoListsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer,\r\n    }\r\n)\r\n\r\nexport const store = createStore(reducers)\r\n\r\nexport type StoreType = typeof store\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/redux-store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}