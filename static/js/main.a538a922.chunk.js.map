{"version":3,"sources":["api/todolists-api.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","state/tasks-reducer.ts","Todolist.tsx","state/todolists-reducer.ts","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","todolistId","taskId","delete","taskTitile","post","Task","onClickHandler","useCallback","removeTask","task","id","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","status","Checkbox","Delete","initialState","Todolist","dispatch","useDispatch","useEffect","then","res","action","tasks","type","setTasksAC","data","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","t","removeTodolist","map","style","paddingTop","Button","App","resp","todolists","useSelector","state","removeTaskAC","RemoveTaskTC","taskTitle","item","AddTaskTC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistTitleAC","addTodolist","v1","addTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","stateCopy","newTasks","todolistTasks","newTasksArray","copyState","forEach","todoListId","addedDate","order","todolist","find","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a538a922.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fd7ee122-ff59-4cee-b5b0-6226ee5b433c'\r\n    }\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n        },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.todolistId, props.task.id), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {TasksStateType} from '../App';\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from './todolists-reducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, TodolistType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    status: TaskStatuses\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\nexport type SetTodolistsActionType = {\r\n    type: 'SET-TODOLISTS'\r\n    todolists: Array<TodolistType>\r\n}\r\nexport type SetTasksActionType = {\r\n    type: 'SET-TASKS'\r\n    tasks: Array<TaskType>\r\n    todolistId: string\r\n}\r\n\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType | SetTasksActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n                case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, status: action.status} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'SET-TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (todolistId: string, taskId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', status, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string): SetTasksActionType => {\r\n    return {type: 'SET-TASKS', tasks, todolistId}\r\n}\r\n\r\n\r\n// thunk\r\n\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC(tasks, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const RemoveTaskTC = (todolistId: string, id: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId,id)\r\n        .then(() => {\r\n            const action = removeTaskAC(todolistId, id);\r\n            dispatch(action);})\r\n}\r\nexport const AddTaskTC = (todolistId: string, taskTitle: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.createTask(todolistId, taskTitle)\r\n        .then((resp) => {\r\n            const action = addTaskAC(resp.data.data.item);\r\n            dispatch(action);})\r\n}\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\nimport {FilterValuesType} from './state/todolists-reducer'\r\nimport {fetchTasksTC} from \"./state/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {v1} from 'uuid';\r\nimport {todolistsAPI, TodolistType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\nexport type SetTodolistsActionType = {\r\n    type: 'SET-TODOLISTS'\r\n    todolists: Array<TodolistType>\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType | SetTodolistsActionType\r\n\r\nconst initialState: Array<TodolistDomainType> =  [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n    {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\r\n]\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all',\r\n                addedDate: '',\r\n                order: 0\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => ({\r\n                ...tl,\r\n                filter: 'all'\r\n            }))\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>): SetTodolistsActionType => {\r\n    return {type: 'SET-TODOLISTS', todolists}\r\n}\r\n\r\n// thunk\r\n\r\nexport const fetchTodolistsThunk = () => (dispatch: Dispatch) => {\r\n    todolistsAPI.getTodolists()\r\n        .then((resp) => {\r\n            dispatch(setTodolistsAC(resp.data))\r\n        })\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC, fetchTodolistsThunk,\r\n    FilterValuesType,\r\n    removeTodolistAC,\r\n    TodolistDomainType\r\n} from './state/todolists-reducer'\r\nimport {\r\n    AddTaskTC,\r\n    changeTaskStatusAC,\r\n    changeTaskTitleAC,\r\n    RemoveTaskTC\r\n} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsThunk())\r\n    },[])\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback(function (todolistId: string, id: string) {\r\n        dispatch(RemoveTaskTC(todolistId, id))\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(AddTaskTC(todolistId, title))\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const action = changeTaskStatusAC(id, status, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const action = removeTodolistAC(id);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const action = changeTodolistTitleAC(id, title);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './state/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}