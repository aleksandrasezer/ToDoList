{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","ToDoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","onClickAddItem","trimmedTitle","trim","addItem","errorMessage","style","color","className","value","onChange","e","currentTarget","onKeyPress","key","onClick","EditableSpan","editMode","setEditMode","onBlur","changeTitle","autoFocus","onDoubleClick","ToDoList","filter","tasksJSXElements","tasks","map","t","isDone","changeTaskStatus","id","checked","todoListId","type","newTitle","changeTaskTitle","removeTask","changeTodoListTitle","removeTodoList","addTask","changeFilter","App","todoListId_1","v1","todoListId_2","todoLists","setTodoLists","setTasks","taskId","newTask","newIsDoneValue","tl","getTasksForTodoList","todoListsComponents","newTodoListId","newTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ccb1a146.chunk.js","sourcesContent":["import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\n\r\ntype AddItemFormPropsType = {\r\n  addItem: (title:string) => void\r\n}\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    const onClickAddItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n            setError(false)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            onClickAddItem()\r\n        }\r\n    }\r\n\r\n    const errorMessage = error ?\r\n        <div style={{color: \"red\"}}> Title is required!</div> : null\r\n\r\n    return (\r\n        <div>\r\n            <input className = {error ? \"error\" : \"\"}\r\n                   value={title}\r\n                   onChange={onChangeTitle}\r\n                   onKeyPress={onKeyPressAddTask}/>\r\n            <button onClick={onClickAddItem}>+</button>\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const [error, setError] = useState<boolean>(false)\r\n    const errorMessage = error ?\r\n        <div style={{color: \"red\"}}> Title is required!</div> : null\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    return (\r\n        editMode\r\n            ? <input\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onBlur={offEditMode}\r\n                autoFocus/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\ntype ToDoListPropsType = {\r\n    todoListId: string\r\n    title: string,\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    addTask: (title: string, todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void //ФУНКЦИЯ\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void //ФУНКЦИЯ\r\n    changeTaskStatus: (taskId: string, newIsDoneValue: boolean, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListId: string) => void\r\n    changeTodoListTitle: (todoListId: string, newTitle: string) => void\r\n}\r\n\r\nfunction ToDoList(props: ToDoListPropsType) {\r\n    const {filter} = props\r\n    const tasksJSXElements = props.tasks.map(t => {\r\n        const removeTask = () => {\r\n            props.removeTask(t.id, props.todoListId)\r\n        }\r\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n            props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListId)\r\n        const changeTaskTitle = (newTitle: string) => {\r\n            props.changeTaskTitle(t.id,newTitle,props.todoListId)\r\n        }\r\n\r\n        return (\r\n            <li className = {t.isDone ? \"isDone\" : \"\"}>\r\n                <input\r\n                    onChange={changeTaskStatus}\r\n                    type=\"checkbox\"\r\n                    checked={t.isDone}/>\r\n                    <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n                <button onClick={removeTask}>delete</button>\r\n            </li>\r\n        )\r\n    })\r\n\r\n\r\n    const onClickAllFilter = () => props.changeFilter('all', props.todoListId)\r\n    const onClickActiveFilter = () => props.changeFilter('active', props.todoListId)\r\n    const onClickCompletedFilter = () => props.changeFilter('completed', props.todoListId)\r\n    const onClickRemoveTodoList = () => props.removeTodoList(props.todoListId)\r\n    const addTask = (title: string) => props.addTask(title, props.todoListId)\r\n    const changeTodoListTitleCallBack = (newTitle: string) => {\r\n        props.changeTodoListTitle(props.todoListId, newTitle)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title}  changeTitle={changeTodoListTitleCallBack} /> {/*{props.title} */}\r\n            <button onClick={onClickRemoveTodoList}> X </button> </h3>\r\n            <AddItemForm addItem={addTask} />\r\n            <ul>\r\n                {tasksJSXElements}\r\n            </ul>\r\n            <div>\r\n                <button\r\n                    className = {filter === \"all\" ? \"activeFilter\" : \"\"}\r\n                    onClick={onClickAllFilter}>All</button>\r\n                <button\r\n                    className = {filter === \"active\" ? \"activeFilter\" : \"\"}\r\n                    onClick={onClickActiveFilter}>Active</button>\r\n                <button\r\n                    className = {filter === \"completed\" ? \"activeFilter\" : \"\"}\r\n                    onClick={onClickCompletedFilter}>Completed</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport ToDoList from \"./ToDoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\ntype ToDoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TaskStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction App() {\r\n    //BLL\r\n    const todoListId_1 = v1()\r\n    const todoListId_2 = v1()\r\n    const [todoLists, setTodoLists] = useState<ToDoListType[]>([\r\n        {id: todoListId_1, title: \"What to learn\", filter: 'all'},\r\n        {id: todoListId_2, title: \"What to buy\", filter: 'all'}\r\n    ])\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListId_1]: [\r\n            {id: v1(), title: \"HTML\", isDone: true},\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n        ],\r\n        [todoListId_2]: [\r\n            {id: v1(), title: \"milk\", isDone: true},\r\n            {id: v1(), title: \"bread\", isDone: false},\r\n            {id: v1(), title: \"eggs\", isDone: false},\r\n        ]\r\n    })\r\n\r\n    function removeTask(taskId: string, todoListId: string) {\r\n       setTasks({...tasks, [todoListId]: tasks[todoListId].filter(t => t.id !== taskId)})\r\n    }\r\n    function addTask(title: string, todoListId: string) {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title, //title: title\r\n            isDone: false\r\n        }\r\n        setTasks({...tasks, [todoListId]: [newTask,...tasks[todoListId]]})\r\n    }\r\n    function changeTaskStatus(taskId: string, newIsDoneValue: boolean, todoListId: string) {\r\n        tasks[todoListId] = tasks[todoListId].map(t => t.id === taskId ? {...t, isDone: newIsDoneValue} : t)\r\n        setTasks({...tasks})\r\n    }\r\n    function changeTaskTitle(taskId: string, newTitle: string, todoListId: string) {\r\n        tasks[todoListId] = tasks[todoListId].map(t => t.id === taskId ? {...t, title: newTitle} : t)\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTodoListTitle = (todoListId: string, newTitle: string) => {\r\nsetTodoLists((todoLists.map(tl => tl.id === todoListId ? {...tl, title: newTitle} : tl)))\r\n    }\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListId ? {...tl, filter: value} : tl))\r\n    }\r\n    function removeTodoList(todoListId: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListId))\r\n        delete tasks[todoListId] // удалили массив--> удалили и таски из него, чтобы не болтались\r\n\r\n    }\r\n    function addTodoList(title: string) {\r\n        const newTodoListId = v1()\r\n        const newTodoList: ToDoListType = {id: newTodoListId, title, filter: 'all'}\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({...tasks, [newTodoListId]: []})\r\n    }\r\n\r\n    //UI\r\n    function getTasksForTodoList(todoLists: ToDoListType) {\r\n        switch (todoLists.filter) {\r\n            case \"active\":\r\n                return tasks[todoLists.id].filter(t => !t.isDone)\r\n            case \"completed\":\r\n                return tasks[todoLists.id].filter(t => t.isDone)\r\n            default:\r\n                return tasks[todoLists.id]\r\n        }\r\n    }\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        return(\r\n            <ToDoList\r\n                key={tl.id}\r\n                todoListId={tl.id}\r\n                title={tl.title}\r\n                tasks={getTasksForTodoList(tl)}\r\n                filter={tl.filter}\r\n                addTask={addTask}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                changeTaskStatus={changeTaskStatus}\r\n                removeTodoList={removeTodoList}\r\n                changeTaskTitle={changeTaskTitle}\r\n                changeTodoListTitle={changeTodoListTitle}/>\r\n        )\r\n    })\r\n\r\n//UI\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList} />\r\n            {todoListsComponents}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}