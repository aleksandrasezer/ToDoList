{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","ToDoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","onClickAddItem","trimmedTitle","trim","addItem","TextField","label","onBlur","variant","value","onChange","e","currentTarget","onKeyPress","key","helperText","AddBox","color","onClick","fontSize","EditableSpan","editMode","setEditMode","changeTitle","autoFocus","onDoubleClick","ToDoList","filter","tasksJSXElements","tasks","map","t","style","paddingLeft","listStyle","className","isDone","Checkbox","size","changeTaskStatus","id","checked","todoListId","newTitle","changeTaskTitle","IconButton","aria-label","removeTask","Delete","changeTodoListTitle","removeTodoList","addTask","Button","marginLeft","changeFilter","App","todoListId_1","v1","todoListId_2","todoLists","setTodoLists","setTasks","taskId","newTask","newIsDoneValue","tl","getTasksForTodoList","todoListsComponents","Grid","item","Paper","elevation","padding","AppBar","position","Toolbar","Menu","Typography","Container","fixed","container","newTodoListId","newTodoList","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.57cbc867.chunk.js","sourcesContent":["import {TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    const onClickAddItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n            setError(false)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            onClickAddItem()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                label={'Title'}\r\n                onBlur={() => setError(false)}\r\n                variant={'outlined'}\r\n                error={error}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n                helperText={error && 'Title is required'}\r\n            />\r\n\r\n            <AddBox color={'primary'}\r\n                    onClick={onClickAddItem}\r\n                    fontSize={'large'}/>\r\n        </div>\r\n    )\r\n}\r\n","import { TextField } from \"@material-ui/core\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                value={title}\r\n                label={'Title'}\r\n                onChange={onChangeTitle}\r\n                onBlur={offEditMode}\r\n                autoFocus/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype ToDoListPropsType = {\r\n    todoListId: string\r\n    title: string,\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    addTask: (title: string, todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void //ФУНКЦИЯ\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void //ФУНКЦИЯ\r\n    changeTaskStatus: (taskId: string, newIsDoneValue: boolean, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListId: string) => void\r\n    changeTodoListTitle: (todoListId: string, newTitle: string) => void\r\n}\r\n\r\nfunction ToDoList(props: ToDoListPropsType) {\r\n    const {filter} = props\r\n    const tasksJSXElements = props.tasks.map(t => {\r\n        const removeTask = () => {\r\n            props.removeTask(t.id, props.todoListId)\r\n        }\r\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n            props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListId)\r\n        const changeTaskTitle = (newTitle: string) => {\r\n            props.changeTaskTitle(t.id,newTitle,props.todoListId)\r\n        }\r\n\r\n        return (\r\n            <li key={t.id} style={{paddingLeft: '0px', listStyle: 'none'}}>\r\n                <span className = {t.isDone ? \"isDone\" : \"\"}>\r\n\r\n                <Checkbox size={'small'}\r\n                color={'primary'}\r\n                    onChange={changeTaskStatus}\r\n                    checked={t.isDone}/>\r\n\r\n                <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n                </span>\r\n                <IconButton aria-label=\"delete\"\r\n                    size={'small'}\r\n                    onClick={removeTask}>\r\n                         <Delete/></IconButton>\r\n            </li>\r\n        )\r\n    })\r\n\r\n\r\n    const onClickAllFilter = () => props.changeFilter('all', props.todoListId)\r\n    const onClickActiveFilter = () => props.changeFilter('active', props.todoListId)\r\n    const onClickCompletedFilter = () => props.changeFilter('completed', props.todoListId)\r\n    const onClickRemoveTodoList = () => props.removeTodoList(props.todoListId)\r\n    const addTask = (title: string) => props.addTask(title, props.todoListId)\r\n    const changeTodoListTitleCallBack = (newTitle: string) => {\r\n        props.changeTodoListTitle(props.todoListId, newTitle)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title}  changeTitle={changeTodoListTitleCallBack} /> {/*{props.title} */}\r\n            <IconButton \r\n            onClick={onClickRemoveTodoList} \r\n            aria-label=\"delete\"\r\n            size={'small'}><Delete/></IconButton> </h3>\r\n            <AddItemForm addItem={addTask} />\r\n            <ul>\r\n                {tasksJSXElements}\r\n            </ul>\r\n            <div>\r\n                <Button \r\n                    style={{marginLeft: '3px'}}\r\n                    size={'small'}\r\n                    variant={filter === \"all\" ? \"outlined\" : \"contained\"}\r\n                    color={'primary'}\r\n                    onClick={onClickAllFilter}>All</Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    size={'small'}\r\n                    variant={filter === \"active\" ? \"outlined\" : \"contained\"}\r\n                    color={'primary'}\r\n                    onClick={onClickActiveFilter}>Active</Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    size={'small'}\r\n                    variant={filter === \"completed\" ? \"outlined\" : \"contained\"}\r\n                    color={'primary'}\r\n                    onClick={onClickCompletedFilter}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport ToDoList from \"./ToDoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport { AppBar, Container, Paper, Toolbar, IconButton, Typography, Grid} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\ntype ToDoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TaskStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction App() {\r\n    //BLL\r\n    const todoListId_1 = v1()\r\n    const todoListId_2 = v1()\r\n    const [todoLists, setTodoLists] = useState<ToDoListType[]>([\r\n        {id: todoListId_1, title: \"What to learn\", filter: 'all'},\r\n        {id: todoListId_2, title: \"What to buy\", filter: 'all'}\r\n    ])\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListId_1]: [\r\n            {id: v1(), title: \"HTML\", isDone: true},\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n        ],\r\n        [todoListId_2]: [\r\n            {id: v1(), title: \"milk\", isDone: true},\r\n            {id: v1(), title: \"bread\", isDone: false},\r\n            {id: v1(), title: \"eggs\", isDone: false},\r\n        ]\r\n    })\r\n\r\n    function removeTask(taskId: string, todoListId: string) {\r\n       setTasks({...tasks, [todoListId]: tasks[todoListId].filter(t => t.id !== taskId)})\r\n    }\r\n    function addTask(title: string, todoListId: string) {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title, //title: title\r\n            isDone: false\r\n        }\r\n        setTasks({...tasks, [todoListId]: [newTask,...tasks[todoListId]]})\r\n    }\r\n    function changeTaskStatus(taskId: string, newIsDoneValue: boolean, todoListId: string) {\r\n        tasks[todoListId] = tasks[todoListId].map(t => t.id === taskId ? {...t, isDone: newIsDoneValue} : t)\r\n        setTasks({...tasks})\r\n    }\r\n    function changeTaskTitle(taskId: string, newTitle: string, todoListId: string) {\r\n        tasks[todoListId] = tasks[todoListId].map(t => t.id === taskId ? {...t, title: newTitle} : t)\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTodoListTitle = (todoListId: string, newTitle: string) => {\r\nsetTodoLists((todoLists.map(tl => tl.id === todoListId ? {...tl, title: newTitle} : tl)))\r\n    }\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListId ? {...tl, filter: value} : tl))\r\n    }\r\n    function removeTodoList(todoListId: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListId))\r\n        delete tasks[todoListId] // удалили массив--> удалили и таски из него, чтобы не болтались\r\n\r\n    }\r\n    function addTodoList(title: string) {\r\n        const newTodoListId = v1()\r\n        const newTodoList: ToDoListType = {id: newTodoListId, title, filter: 'all'}\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({...tasks, [newTodoListId]: []})\r\n    }\r\n\r\n    //UI\r\n    function getTasksForTodoList(todoLists: ToDoListType) {\r\n        switch (todoLists.filter) {\r\n            case \"active\":\r\n                return tasks[todoLists.id].filter(t => !t.isDone)\r\n            case \"completed\":\r\n                return tasks[todoLists.id].filter(t => t.isDone)\r\n            default:\r\n                return tasks[todoLists.id]\r\n        }\r\n    }\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        return(\r\n            <Grid item key={tl.id}>\r\n            <Paper elevation={3} style={{padding: '20px'}}>\r\n            <ToDoList\r\n                todoListId={tl.id}\r\n                title={tl.title}\r\n                tasks={getTasksForTodoList(tl)}\r\n                filter={tl.filter}\r\n                addTask={addTask}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                changeTaskStatus={changeTaskStatus}\r\n                removeTodoList={removeTodoList}\r\n                changeTaskTitle={changeTaskTitle}\r\n                changeTodoListTitle={changeTodoListTitle}/>\r\n                </Paper>\r\n                </Grid>\r\n        )\r\n    })\r\n\r\n//UI\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={'static'}>\r\n                <Toolbar>\r\n                    <IconButton color={'inherit'}>\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant={'h2'}>\r\n                        Todo-Lists\r\n                    </Typography>\r\n                    \r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0'}}>\r\n                    <AddItemForm addItem={addTodoList} /> \r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoListsComponents}    \r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}