{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","api/auth-api.ts","store/auth-reducer.ts","store/app-reducer.ts","utils/error-handlers.ts","store/todolists-reducer.ts","store/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","components/CustomAppBar/CustomAppBar.tsx","components/Login/Login.tsx","components/Loader/Loader.tsx","app/App.tsx","store/store.ts","index.tsx","components/Login/Login.module.css","features/TodolistsList/Todolist/Todolist.module.css","components/CustomAppBar/CustomAppBar.module.css","components/Loader/Loader.module.css"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todoListsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","email","password","rememberMe","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedIn","state","action","payload","authReducer","reducer","actions","status","error","isInitialized","setAppStatusAC","setIsInitializedAC","setAppErrorAC","appReducer","serverErrorHandler","dispatch","message","addTodoListAC","unshift","filter","removeTodoListAC","index","findIndex","tl","splice","setTodoListsAC","map","changeTodoListTitleAC","changeTodoListFilterAC","setTodoListStatusAC","todoListsReducer","removeTaskAC","tasks","t","addTaskAC","todoListId","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","getState","task","find","apiModel","deadline","description","priority","startDate","catch","e","AddItemForm","React","memo","props","useState","setTitle","setError","addButtonStyle","disabled","color","addItem","trim","TextField","variant","value","onChange","currentTarget","onKeyPress","charCode","label","helperText","IconButton","style","onClick","AddBox","fontSize","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","listStatus","deleteButtonStyle","checkboxStyle","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","s","taskContainer","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","res","data","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodoList","textAlign","removeTodolist","tasksContainer","paddingTop","Button","TodoLists","todoLists","useSelector","auth","removeTaskTC","resultCode","item","messages","length","addTaskTC","changeStatus","newTitle","changeTodoListTitleTC","addTodolist","addTodoListTC","Grid","container","padding","spacing","allTodolistTasks","Paper","elevation","backgroundColor","to","Alert","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","CustomAppBar","logout","a","anchorEl","setAnchorEl","Boolean","AppBar","position","background","Toolbar","appMenu","edge","aria-label","KeyboardArrowDown","aria-controls","aria-haspopup","aria-expanded","undefined","Menu","MenuListProps","MenuItem","menuLink","Typography","Login","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","login","logIn","resetForm","display","justifyContent","loginContainer","handleSubmit","formItem","htmlFor","type","placeholder","touched","free","href","target","Loader","ldsCircle","App","response","LinearProgress","Container","fixed","exact","path","render","from","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"uKAkDYA,EAMAC,E,gCC1CGC,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,4DDPRQ,EAAWC,IAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAe,WAEpB,OAAON,EAASO,IAAoB,eAF/BD,EAAe,SAITE,GACX,OAAOR,EAASS,KAA2C,aAAc,CAACD,MAAOA,KAL5EF,EAAe,SAOTI,GACX,OAAOV,EAASW,OAAT,qBAA4CD,KAR9CJ,EAAe,SAUTI,EAAYF,GACvB,OAAOR,EAASY,IAAT,qBAAyCF,GAAM,CAACF,MAAOA,KAXzDF,EAAe,SAafO,GACL,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YAdFP,EAAe,SAgBbO,EAAoBC,GAC3B,OAAOd,EAASW,OAAT,qBAA4CE,EAA5C,kBAAgEC,KAjBlER,EAAe,SAmBbO,EAAoBE,GAC3B,OAAOf,EAASS,KAAT,qBAA6DI,EAA7D,UAAiF,CAACL,MAAOO,KApB3FT,EAAe,SAsBbO,EAAoBC,EAAgBE,GAC3C,OAAOhB,EAASY,IAAT,qBAAmDC,EAAnD,kBAAuEC,GAAUE,K,SAgBpF3B,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,kCEhDNU,EAAWC,IAAMC,OAAN,aACbC,QAAS,iDAPI,CACbC,iBAAiB,EACjBC,QAAS,CACL,UAAW,2CAQNY,EAAU,SACbC,EAAeC,EAAkBC,GACnC,OAAOpB,EAASS,KAAK,aAAc,CAACS,MAAOA,EAAOC,SAAUA,EAAUC,WAAYA,KAF7EH,EAAU,WAKf,OAAOjB,EAASW,OAAO,eALlBM,EAAU,WAQf,OAAOjB,EAASO,IAAT,Y,QCZTc,EAAQC,YAAY,CACtBC,KAAM,OACNC,aANiB,CACjBC,YAAY,GAMZC,SAAU,CACNC,cADM,SACQC,EAAOC,GACjBD,EAAMH,WAAaI,EAAOC,YAKzBC,EAAcV,EAAMW,QACnBL,EAAiBN,EAAMY,QAAvBN,cCPRN,EAAQC,YAAY,CACtBC,KAAM,MACNC,aARiB,CACjBU,OAAQ,OACRC,MAAO,KACPC,eAAe,GAMfV,SAAU,CACNW,eADM,SACST,EAAMC,GACjBD,EAAMM,OAASL,EAAOC,SAE1BQ,mBAJM,SAIaV,EAAMC,GACrBD,EAAMQ,cAAgBP,EAAOC,SAEjCS,cAPM,SAOQX,EAAMC,GAChBD,EAAMO,MAAQN,EAAOC,YAMpBU,EAAanB,EAAMW,Q,EACmCX,EAAMY,QAA3DI,E,EAAAA,eAAgBC,E,EAAAA,mBAAoBC,E,EAAAA,cC5BrCE,EAAqB,SAACN,EAAYO,GAC3CA,EAASL,EAAe,WACxBK,EAASH,EAAcJ,EAAMQ,QAAUR,EAAMQ,QAAU,yBCGrDtB,EAAQC,YAAY,CACtBC,KAAM,YACNC,aAJ4C,GAK5CE,SAAU,CACNkB,cADM,SACQhB,EAAMC,GAChBD,EAAMiB,QAAN,2BAAkBhB,EAAOC,SAAzB,IAAkCgB,OAAQ,MAAOZ,OAAQ,WAE7Da,iBAJM,SAIWnB,EAAMC,GACnB,IAAMmB,EAAQpB,EAAMqB,WAAU,SAAAC,GAAE,OAAIA,EAAGxC,KAAOmB,EAAOC,QAAQpB,MACzDsC,GAAS,GACTpB,EAAMuB,OAAOH,EAAO,IAG5BI,eAVM,SAUSxB,EAAMC,GACjB,OAAOA,EAAOC,QAAQuB,KAAI,SAAAH,GAAE,kCAASA,GAAT,IAAaJ,OAAQ,MAAOZ,OAAQ,aAEpEoB,sBAbM,SAagB1B,EAAMC,GACxB,IAAMmB,EAAQpB,EAAMqB,WAAU,SAAAC,GAAE,OAAIA,EAAGxC,KAAOmB,EAAOC,QAAQpB,MAC7DkB,EAAMoB,GAAOxC,MAAQqB,EAAOC,QAAQtB,OAExC+C,uBAjBM,SAiBiB3B,EAAMC,GACzB,IAAMmB,EAAQpB,EAAMqB,WAAU,SAAAC,GAAE,OAAIA,EAAGxC,KAAOmB,EAAOC,QAAQpB,MAC7DkB,EAAMoB,GAAOF,OAASjB,EAAOC,QAAQgB,QAEzCU,oBArBM,SAqBc5B,EAAMC,GACtB,IAAMmB,EAAQpB,EAAMqB,WAAU,SAAAC,GAAE,OAAIA,EAAGxC,KAAOmB,EAAOC,QAAQpB,MAC7DkB,EAAMoB,GAAOd,OAASL,EAAOC,QAAQI,WAMpCuB,EAAmBpC,EAAMW,Q,EAEkCX,EAAMY,QADhEW,E,EAAAA,cAAcG,E,EAAAA,iBAAiBK,E,EAAAA,eACzCG,E,EAAAA,uBAAuBC,E,EAAAA,oBAAoBF,E,EAAAA,sBCxBzCjC,EAAQC,YAAY,CACtBC,KAAM,QACNC,aAJiC,GAKjCE,SAAU,CACNgC,aADM,SACO9B,EAAOC,GAChB,IAAM8B,EAAQ/B,EAAMC,EAAOC,QAAQjB,YAC7BmC,EAAQW,EAAMV,WAAU,SAAAW,GAAC,OAAIA,EAAElD,KAAOmB,EAAOC,QAAQhB,UACvDkC,GAAS,GACTW,EAAMR,OAAOH,EAAO,IAG5Ba,UARM,SAQIjC,EAAOC,GACbD,EAAMC,EAAOC,QAAQgC,YAAYjB,QAAQhB,EAAOC,UAEpDiC,aAXM,SAWOnC,EAAOC,GAChB,IAAM8B,EAAQ/B,EAAMC,EAAOC,QAAQjB,YAC7BmC,EAAQW,EAAMV,WAAU,SAAAW,GAAC,OAAIA,EAAElD,KAAOmB,EAAOC,QAAQhB,UACvDkC,GAAS,IACTW,EAAMX,GAAN,2BAAmBW,EAAMX,IAAWnB,EAAOC,QAAQd,SAE3DgD,WAjBM,SAiBKpC,EAAOC,GACdD,EAAMC,EAAOC,QAAQjB,YAAcgB,EAAOC,QAAQ6B,QAG1DM,cAAe,SAACC,GACZA,EAAQC,QAAQvB,GAAe,SAAChB,EAAOC,GACnCD,EAAMC,EAAOC,QAAQpB,IAAM,MAE/BwD,EAAQC,QAAQpB,GAAkB,SAACnB,EAAOC,UAC/BD,EAAMC,EAAOC,QAAQpB,OAEhCwD,EAAQC,QAAQf,GAAgB,SAACxB,EAAOC,GACpCA,EAAOC,QAAQsC,SAAQ,SAAAlB,GAAE,OAAItB,EAAMsB,EAAGxC,IAAM,YAM3C2D,EAAehD,EAAMW,Q,GACiCX,EAAMY,QAA3DyB,G,GAAAA,aAAcG,G,GAAAA,UAAWE,G,GAAAA,aAAcC,G,GAAAA,WAqDxCM,GAAe,SAACxD,EAAgBE,EAAkCH,GAAnD,OACxB,SAAC6B,EAAuB6B,GACpB7B,EAASL,EAAe,YACxBK,EAASc,EAAoB,CAAC9C,GAAIG,EAAYqB,OAAQ,aACtD,IACMsC,EADQD,IACKZ,MAAM9C,GAAY4D,MAAK,SAAAb,GAAC,OAAIA,EAAElD,KAAOI,KACxD,GAAK0D,EAAL,CAIA,IAAME,EAA6B,aAC/BC,SAAUH,EAAKG,SACfC,YAAaJ,EAAKI,YAClBC,SAAUL,EAAKK,SACfC,UAAWN,EAAKM,UAChBtE,MAAOgE,EAAKhE,MACZ0B,OAAQsC,EAAKtC,QACVlB,GAEPV,EAAwBO,EAAYC,EAAQ4D,GACvChF,MAAK,WACF,IAAMmC,EAASkC,GAAa,CAACjD,SAAQE,QAAOH,eAC5C6B,EAASb,MAEZkD,OAAM,SAACC,GACJvC,EAAmBuC,EAAGtC,MAE9BA,EAASL,EAAe,cACxBK,EAASc,EAAoB,CAAC9C,GAAIG,EAAYqB,OAAQ,oBArBlDQ,EAASH,EAAc,qB,mECjHtB0C,GAAcC,IAAMC,MAAK,SAASC,GAA8B,IAAD,EAE9CC,mBAAS,IAFqC,oBAEjE7E,EAFiE,KAE1D8E,EAF0D,OAG9CD,mBAAwB,MAHsB,oBAGjElD,EAHiE,KAG1DoD,EAH0D,KAIlEC,EAAiBJ,EAAMK,SAAW,CAACC,MAAO,QAAU,CAACA,MAAO,SAE5DC,EAAU,WACS,KAAjBnF,EAAMoF,QACNR,EAAMO,QAAQnF,GACd8E,EAAS,KAETC,EAAS,sBAiBjB,OAAO,iCACH,eAACM,GAAA,EAAD,CAAWC,QAAQ,WACR3D,QAASA,EACT4D,MAAOvF,EACPwF,SAjBS,SAAChB,GACrBM,EAASN,EAAEiB,cAAcF,QAiBdG,WAdW,SAAClB,GACT,OAAV7C,GACAoD,EAAS,MAEM,KAAfP,EAAEmB,UACFR,KAUOS,MAAM,QACNC,WAAYlE,IAEvB,eAACmE,GAAA,EAAD,CAAYC,MAAOf,EAAgBgB,QAASb,EAASF,SAAUL,EAAMK,SAArE,SACI,eAACgB,GAAA,EAAD,CAAQC,SAAS,kBClChBC,GAAezB,IAAMC,MAAK,SAAUC,GAA+B,IAAD,EAC7CC,oBAAS,GADoC,oBACtEuB,EADsE,KAC5DC,EAD4D,OAEnDxB,mBAASD,EAAMW,OAFoC,oBAEtEvF,EAFsE,KAE/D8E,EAF+D,KAgB3E,OAAOsB,EACE,eAACf,GAAA,EAAD,CAAWE,MAAOvF,EAAOwF,SALd,SAAChB,GACjBM,EAASN,EAAEiB,cAAcF,QAI4Be,WAAS,EAACC,OAT1C,WACrBF,GAAY,GACZzB,EAAMY,SAASxF,MAQb,uBAAMwG,cAda,WACrBH,GAAY,GACZvB,EAASF,EAAMW,QAYb,SAAwCX,EAAMW,W,kDClB3CkB,GAAO/B,IAAMC,MAAK,SAACC,GAC5B,IAAM8B,EAAiBC,uBAAY,kBAAM/B,EAAMgC,WAAWhC,EAAMZ,KAAK9D,GAAI0E,EAAMvE,cAAa,CAACuE,EAAMZ,KAAK9D,GAAI0E,EAAMvE,aAC5G4E,EAAgC,YAArBL,EAAMiC,WACjBC,EAAoB7B,EAAW,CAACC,MAAO,QAAU,CAACA,MAAO,WACzD6B,EAAgB9B,EAAW,CAACC,MAAO,QAAU,CAACA,MAAO,SAErD8B,EAAkBL,uBAAY,SAACnC,GACjC,IAAIyC,EAAiBzC,EAAEiB,cAAcyB,QACrCtC,EAAMuC,iBAAiBvC,EAAMZ,KAAK9D,GAAI+G,EAAiBpI,EAAauI,UAAYvI,EAAawI,IAAKzC,EAAMvE,cACzG,CAACuE,EAAMZ,KAAK9D,GAAI0E,EAAMvE,aAEnBiH,EAAuBX,uBAAY,SAACY,GACtC3C,EAAM4C,gBAAgB5C,EAAMZ,KAAK9D,GAAIqH,EAAU3C,EAAMvE,cACtD,CAACuE,EAAMZ,KAAK9D,GAAI0E,EAAMvE,aAEzB,OAAO,uBAAyBoH,UAAWC,KAAEC,cAAtC,UACH,kCACI,eAACC,GAAA,EAAD,CACIV,QAAStC,EAAMZ,KAAKtC,SAAW7C,EAAauI,UAC5CrB,MAAOgB,EACPvB,SAAUwB,EACV/B,SAAUA,IAGd,eAACkB,GAAD,CAAcZ,MAAOX,EAAMZ,KAAKhE,MAAOwF,SAAU8B,OAErD,eAACxB,GAAA,EAAD,CAAYE,QAASU,EACTzB,SAAUA,EACVc,MAAOe,EAFnB,SAGI,eAACe,GAAA,EAAD,QAdSjD,EAAMZ,KAAK9D,OCXnB4H,GAAWpD,IAAMC,MAAK,SAAUC,GAEzC,IAAM1C,EAAW6F,cAEjBC,qBAAU,WACN,IJ2CqB3H,EI3Cf4H,GJ2Ce5H,EI3CMuE,EAAMlC,GAAGxC,GJ2CQ,SAACgC,GACjDA,EAASL,EAAe,YACxB/B,EAAsBO,GACjBnB,MAAK,SAACgJ,GACH,IAAM/E,EAAQ+E,EAAIC,KAAKC,MACjB/G,EAASmC,GAAW,CAACL,QAAO9C,eAClC6B,EAASb,GACTa,EAASL,EAAe,iBAE3B0C,OAAM,SAACC,GACJvC,EAAmBuC,EAAGtC,QIpD1BA,EAAS+F,KACV,CAAC/F,EAAU0C,EAAMlC,GAAGxC,KAEvB,IAAMmI,EAAU1B,uBAAY,SAAC3G,GACzB4E,EAAMyD,QAAQrI,EAAO4E,EAAMlC,GAAGxC,MAC/B,CAAC0E,EAAMyD,QAASzD,EAAMlC,GAAGxC,KAKtBoI,EAAsB3B,uBAAY,SAAC3G,GACrC4E,EAAM0D,oBAAoB1D,EAAMlC,GAAGxC,GAAIF,KACxC,CAAC4E,EAAMlC,GAAGxC,GAAI0E,EAAM0D,sBAEjBC,EAAoB5B,uBAAY,kBAAM/B,EAAM4D,aAAa,MAAO5D,EAAMlC,GAAGxC,MAAK,CAAC0E,EAAMlC,GAAGxC,GAAI0E,EAAM4D,eAClGC,EAAuB9B,uBAAY,kBAAM/B,EAAM4D,aAAa,SAAU5D,EAAMlC,GAAGxC,MAAK,CAAC0E,EAAMlC,GAAGxC,GAAI0E,EAAM4D,eACxGE,EAA0B/B,uBAAY,kBAAM/B,EAAM4D,aAAa,YAAa5D,EAAMlC,GAAGxC,MAAK,CAAC0E,EAAMlC,GAAGxC,GAAI0E,EAAM4D,eAE9GvD,EAA+B,YAApBL,EAAMlC,GAAGhB,OACpBoF,EAAoB7B,EAAW,CAACC,MAAO,QAAU,CAACA,MAAO,WAE3DyD,EAAmB/D,EAAMzB,MAQ7B,MAPwB,WAApByB,EAAMlC,GAAGJ,SACTqG,EAAmB/D,EAAMzB,MAAMb,QAAO,SAAAc,GAAC,OAAIA,EAAE1B,SAAW7C,EAAawI,QAEjD,cAApBzC,EAAMlC,GAAGJ,SACTqG,EAAmB/D,EAAMzB,MAAMb,QAAO,SAAAc,GAAC,OAAIA,EAAE1B,SAAW7C,EAAauI,cAGlE,iCACH,sBAAIrB,MAAO,CAAC6C,UAAW,UAAvB,UACI,eAACzC,GAAD,CAAcZ,MAAOX,EAAMlC,GAAG1C,MAAOwF,SAAU8C,IAC/C,eAACxC,GAAA,EAAD,CAAYE,QAzBG,WACnBpB,EAAMiE,eAAejE,EAAMlC,GAAGxC,KAyBd+E,SAAUA,EACVc,MAAOe,EAFnB,SAGI,eAACe,GAAA,EAAD,SAGR,eAACpD,GAAD,CAAaU,QAASkD,EAASpD,SAAUA,IACzC,sBAAKwC,UAAWC,KAAEoB,eAAlB,SAEQH,EAAiB9F,KAAI,SAAAO,GAAC,OAAI,eAACqD,GAAD,CAAiBzC,KAAMZ,EAAG/C,WAAYuE,EAAMlC,GAAGxC,GACzC0G,WAAYhC,EAAMgC,WAClBY,gBAAiB5C,EAAM4C,gBACvBL,iBAAkBvC,EAAMuC,iBACxBN,WAAYjC,EAAMlC,GAAGhB,QAAUkD,EAAMlC,GAAGhB,QAJnC0B,EAAElD,SAQ/C,uBAAK6F,MAAO,CAACgD,WAAY,QAAzB,UACI,eAACC,GAAA,EAAD,CAAQ1D,QAA6B,QAApBV,EAAMlC,GAAGJ,OAAmB,WAAa,OAClD0D,QAASuC,EACTrD,MAAO,UACPD,SAAUA,EAHlB,iBAMA,eAAC+D,GAAA,EAAD,CAAQ1D,QAA6B,WAApBV,EAAMlC,GAAGJ,OAAsB,WAAa,OACrD0D,QAASyC,EACTvD,MAAO,UACPD,SAAUA,EAHlB,oBAMA,eAAC+D,GAAA,EAAD,CAAQ1D,QAA6B,cAApBV,EAAMlC,GAAGJ,OAAyB,WAAa,OACxD0D,QAAS0C,EACTxD,MAAO,YACPD,SAAUA,EAHlB,gC,SC9DCgE,GAAsB,WAC/B,IAAMC,EAAYC,aAAyD,SAAA/H,GAAK,OAAIA,EAAM8H,aACpF/F,EAAQgG,aAA8C,SAAA/H,GAAK,OAAIA,EAAM+B,SACrElC,EAAakI,aAAuC,SAAA/H,GAAK,OAAIA,EAAMgI,KAAKnI,cACxEiB,EAAW6F,cAEjBC,qBAAU,WACN,IAAMC,ENoBH,SAAC/F,GACJA,EAASL,EAAe,YACxB/B,IACKZ,MAAK,SAACgJ,GACHhG,EAASU,EAAesF,EAAIC,OAC5BjG,EAASL,EAAe,iBAE3B0C,OAAM,SAACC,GACJvC,EAAmBuC,EAAEtC,OM3B7BA,EAAS+F,KACV,CAAC/F,IAEJ,IAAM0E,EAAaD,uBAAY,SAAUzG,EAAYG,GACjD,IAAM4H,EL2Cc,SAAC3H,EAAgBD,GAAjB,OAAwC,SAAC6B,GACjEA,EAASL,EAAe,YACxBK,EAASc,EAAoB,CAAC9C,GAAIG,EAAYqB,OAAQ,aACtD5B,EAAwBO,EAAYC,GAC/BpB,MAAK,WACFgD,EAASgB,GAAa,CAAC5C,SAAQD,gBAC/B6B,EAASL,EAAe,cACxBK,EAASc,EAAoB,CAAC9C,GAAIG,EAAYqB,OAAQ,kBAEzD6C,OAAM,SAACC,GACJvC,EAAmBuC,EAAGtC,GACtBA,EAASc,EAAoB,CAAC9C,GAAIG,EAAYqB,OAAQ,gBKtD5C2H,CAAanJ,EAAIG,GAC/B6B,EAAS+F,KACV,CAAC/F,IAEEmG,EAAU1B,uBAAY,SAAU3G,EAAeK,GACjD,IAAM4H,ELoDW,SAACjI,EAAeK,GAAhB,OAAuC,SAAC6B,GAC7DA,EAASL,EAAe,YACxBK,EAASc,EAAoB,CAAC9C,GAAIG,EAAYqB,OAAQ,aACtD5B,EAAwBO,EAAYL,GAC/Bd,MAAK,SAAAgJ,GACF,GAA4B,IAAxBA,EAAIC,KAAKmB,WAAkB,CAC3BpH,EAASL,EAAe,cACxBK,EAASc,EAAoB,CAAC9C,GAAIG,EAAYqB,OAAQ,eACtD,IAAMsC,EAAOkE,EAAIC,KAAKA,KAAKoB,KAC3BrH,EAASmB,GAAUW,SAEfkE,EAAIC,KAAKqB,SAASC,SAClBxH,EAAmBiG,EAAIC,KAAKqB,SAAS,GAAItH,GACzCA,EAASc,EAAoB,CAAC9C,GAAIG,EAAYqB,OAAQ,gBAIjE6C,OAAM,SAACC,GACJvC,EAAmBuC,EAAGtC,GACtBA,EAASc,EAAoB,CAAC9C,GAAIG,EAAYqB,OAAQ,gBKvE5CgI,CAAU1J,EAAOK,GAC/B6B,EAAS+F,KACV,CAAC/F,IAEEyH,EAAehD,uBAAY,SAAUzG,EAAYwB,EAAsBrB,GACzE,IAAM4H,EAAQnE,GAAa5D,EAAI,CAACwB,UAASrB,GACzC6B,EAAS+F,KACV,CAAC/F,IAEEsF,EAAkBb,uBAAY,SAAUzG,EAAY0J,EAAkBvJ,GACxE,IAAM4H,EAAQnE,GAAa5D,EAAI,CAACF,MAAO4J,GAAWvJ,GAClD6B,EAAS+F,KACV,CAAC/F,IAEEsG,EAAe7B,uBAAY,SAAUrE,EAA0BjC,GACjE,IAAMgB,EAAS0B,EAAuB,CAAC7C,GAAIG,EAAYiC,WACvDJ,EAASb,KACV,CAACa,IAEE2G,EAAiBlC,uBAAY,SAAUzG,GACzC,INEyBG,EMFnB4H,GNEmB5H,EMFMH,ENG5B,SAACgC,GACJA,EAASL,EAAe,YACxBK,EAASc,EAAoB,CAAC9C,GAAIG,EAAWqB,OAAQ,aACrD5B,EAA4BO,GACvBnB,MAAK,WACFgD,EAASK,EAAiB,CAACrC,GAAIG,KAC/B6B,EAASL,EAAe,iBAE3B0C,OAAM,SAACC,GACJvC,EAAmBuC,EAAEtC,GACrBA,EAASc,EAAoB,CAAC9C,GAAIG,EAAWqB,OAAQ,iBMZ7DQ,EAAS+F,KACV,CAAC/F,IAEEoG,EAAsB3B,uBAAY,SAAUzG,EAAYF,GAC1D,IAAMiI,ENyBuB,SAAC/H,EAAYF,GAC9C,OAAO,SAACkC,GACJA,EAASL,EAAe,YACxBK,EAASc,EAAoB,CAAC9C,KAAGwB,OAAO,aACxC5B,EAA4BI,EAAIF,GAC3Bd,MAAK,WACFgD,EAASY,EAAsB,CAAC5C,KAAIF,WACpCkC,EAASL,EAAe,cACxBK,EAASc,EAAoB,CAAC9C,KAAGwB,OAAQ,kBAE5C6C,OAAM,SAACC,GACJvC,EAAmBuC,EAAEtC,GACrBA,EAASc,EAAoB,CAAC9C,KAAGwB,OAAQ,gBMrCnCmI,CAAsB3J,EAAIF,GACxCkC,EAAS+F,KACV,CAAC/F,IAEE4H,EAAcnD,uBAAY,SAAC3G,GAC7B,IAAMiI,ENOe,SAACjI,GAC1B,OAAO,SAACkC,GACJA,EAASL,EAAe,YACxB/B,EAA4BE,GACvBd,MAAK,SAACgJ,GACHhG,EAASE,EAAc8F,EAAIC,KAAKA,KAAKoB,OACrCrH,EAASL,EAAe,iBAE3B0C,OAAM,SAACC,GACJvC,EAAmBuC,EAAEtC,OMhBf6H,CAAc/J,GAC5BkC,EAAS+F,KACV,CAAC/F,IAEJ,OAAIjB,EAIG,uCACH,eAAC+I,GAAA,EAAD,CAAMC,WAAS,EAAClE,MAAO,CAACmE,QAAS,QAAjC,SACI,eAACzF,GAAD,CAAaU,QAAS2E,EAAa7E,UAAU,MAEjD,eAAC+E,GAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,SAEQjB,EAAUrG,KAAI,SAAAH,GACV,IAAI0H,EAAmBjH,EAAMT,EAAGxC,IAEhC,OAAO,eAAC8J,GAAA,EAAD,CAAMT,MAAI,EAAV,SACH,eAACc,GAAA,EAAD,CAAOC,UAAW,GACXvE,MAAO,CAACmE,QAAS,OAAQK,gBAAiB,yBADjD,SAEI,eAACzC,GAAD,CACIpF,GAAIA,EACJS,MAAOiH,EACPxD,WAAYA,EACZ4B,aAAcA,EACdH,QAASA,EACTlB,iBAAkBwC,EAClBd,eAAgBA,EAChBrB,gBAAiBA,EACjBc,oBAAqBA,OAZV5F,EAAGxC,YAZ/B,eAAC,KAAD,CAAUsK,GAAI,Y,oBC/D7B,SAASC,GAAM7F,GACX,OAAO,eAAC,KAAD,aAAU0F,UAAW,EAAGhF,QAAQ,UAAaV,IAGjD,SAAS8F,KAEZ,IAAMxI,EAAW6F,cACXpG,EAAQwH,aAA6C,SAAA/H,GAAK,OAAIA,EAAMuJ,IAAIhJ,SACxEiJ,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJ5I,EAASH,EAAc,QAI3B,OACI,eAACgJ,GAAA,EAAD,CAAUC,KAAgB,OAAVrJ,EAAgBsJ,iBAAkB,IAAMC,QAASN,EAAjE,SACI,eAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAtC,SACKxJ,M,4FCjBJyJ,GAAe,SAACxG,GAEzB,IAAM1C,EAAW6F,cACXsD,EAAS1E,uBAAY,WACvBzE,EXUc,uCAAM,WAAOA,GAAP,SAAAoJ,EAAA,6DACxBpJ,EAASL,EAAe,YADA,SAEHpB,IAFG,OAGO,IAHP,OAGb0H,KAAKmB,YACZpH,EAASf,GAAc,IACvBe,EAASL,EAAe,eAExBK,EAASL,EAAe,WAPJ,2CAAN,yDWTf,CAACK,IALsD,EAO1BwC,IAAMG,SAAS,MAPW,oBAOnD0G,EAPmD,KAOzCC,EAPyC,KAQpDR,EAAOS,QAAQF,GAQrB,OAAO,eAACG,GAAA,EAAD,CAAQC,SAAS,SAAS5F,MAAO,CAAC6F,WAAY,SAA9C,SACH,gBAACC,GAAA,EAAD,CAASpE,UAAWC,KAAEoE,QAAtB,UACI,+BACA,gBAAChG,GAAA,EAAD,CAAYiG,KAAK,QAAQ7G,MAAM,UAAU8G,aAAW,OAApD,UACI,eAACC,GAAA,EAAD,CAAmB/L,GAAG,eACHgM,gBAAc,aACdC,gBAAc,OACdC,gBAAepB,EAAO,YAASqB,EAC/BrG,QAfX,SAACxB,GACjBgH,EAAYhH,EAAEiB,eAAiBjB,EAAEiB,kBAezB,eAAC6G,GAAA,EAAD,CACIpM,GAAG,aACHqL,SAAUA,EACVP,KAAMA,EACNE,QAjBI,WAChBM,EAAY,OAiBAe,cAAe,CACX,kBAAmB,gBAN3B,SASI,eAACC,GAAA,EAAD,UACI,eAAC,KAAD,CAAShC,GAAI,IAAK/C,UAAWC,KAAE+E,SAA/B,iCAIZ,eAACC,GAAA,EAAD,CAAYpH,QAAQ,KAApB,SACK,eAEJV,EAAM3D,WACD,eAAC+H,GAAA,EAAD,CAAQ9D,MAAO,UAAWI,QAAS,WAAYU,QAASqF,EAAxD,qBAGA,+B,6BC9CLsB,GAAQ,WACjB,IAAMzK,EAAW6F,cACV9G,EAAckI,aAAY,SAAC/H,GAAD,OAA6BA,EAAMgI,QAA7DnI,WAED2L,EAASC,aAAU,CACrBC,cAAe,CACXpM,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBmM,SAAU,SAACC,GACP,IAAMC,EAAyB,GAS/B,OARKD,EAAOtM,MAEA,4CAA4CwM,KAAKF,EAAOtM,SAChEuM,EAAOvM,MAAQ,yBAFfuM,EAAOvM,MAAQ,oBAIdsM,EAAOrM,WACRsM,EAAOtM,SAAW,wBAEfsM,GAEXE,SAAU,SAAAH,GACN9K,EZCS,SAAC8K,GAAD,8CAA2B,WAAO9K,GAAP,eAAAoJ,EAAA,6DAC5CpJ,EAASL,EAAe,YADoB,SAExBpB,EAAcuM,EAAOtM,MAAMsM,EAAOrM,SAASqM,EAAOpM,YAF1B,OAGd,KADxBwM,EAFsC,QAGlCjF,KAAKmB,YACXpH,EAASf,GAAc,IACvBe,EAASL,EAAe,gBAExBK,EAASH,EAAcqL,EAAMjF,KAAKqB,SAAS,KAC3CtH,EAASL,EAAe,YARgB,2CAA3B,sDYDAwL,CAAML,IACfJ,EAAOU,eAIf,OAAIrM,EACO,eAAC,KAAD,CAAUuJ,GAAI,MAGrB,eAAC,KAAD,CAAgBjF,MAAOqH,EAAvB,SACI,sBAAK7G,MAAO,CAACwH,QAAS,OAAOC,eAAgB,gBAA7C,SACI,gBAACnD,GAAA,EAAD,CAAO5C,UAAWC,KAAE+F,eACbnD,UAAW,GADlB,UAEI,qBAAIvE,MAAO,CAACb,MAAO,aAAnB,qBAEA,wBAAMiI,SAAUP,EAAOc,aAAvB,UACI,uBAAKjG,UAAWC,KAAEiG,SAAlB,UACI,wBAAOC,QAAQ,QAAf,mBAAoC,wBACpC,eAAC,KAAD,CACIC,KAAK,QACLC,YAAY,SACZnM,MAAOiL,EAAOmB,QAAQrN,MAAQkM,EAAOK,OAAOvM,MAAQ,KACpDK,KAAK,aAEb,uBAAK0G,UAAWC,KAAEiG,SAAlB,UACI,wBAAOC,QAAQ,WAAf,sBAA0C,wBAC1C,eAAC,KAAD,CACIC,KAAK,WACLC,YAAY,WACZnM,MAAOiL,EAAOmB,QAAQpN,SAAWiM,EAAOK,OAAOtM,SAAW,KAC1DI,KAAM,gBAEd,iCACI,eAAC6G,GAAA,EAAD,CAAU7G,KAAK,aAAagF,MAAO,CAACb,MAAO,WAD/C,iBAIA,eAAC8D,GAAA,EAAD,CAAQ6E,KAAK,SAAS9H,MAAO,CAACb,MAAO,SAAUI,QAAQ,WAAvD,mBAGA,uBAAKmC,UAAWC,KAAEsG,KAAlB,sCAC6B,oBAAGC,KAAK,wCAAwCC,OAAO,SAAvD,kBAAwE,wBADrG,2CAE4C,wBAF5C,UAGW,uBAAMnI,MAAO,CAACb,MAAO,SAArB,gCAHX,IAGoE,wBAHpE,aAIc,uBAAMa,MAAO,CAACb,MAAO,SAArB,gC,oBCxEzBiJ,GAAS,WAClB,OAAO,sBAAK1G,UAAWC,KAAE0G,UAAlB,SACH,4BCsCOC,OA9Bf,WAAgB,IAAD,EAEqBlF,aAAY,SAAC/H,GAAD,OAA6BA,EAAMuJ,OAAxEjJ,EAFI,EAEJA,OAAQE,EAFJ,EAEIA,cACTX,EAAakI,aAAY,SAAC/H,GAAD,OAA6BA,EAAMgI,KAAKnI,cACjEiB,EAAW6F,cAMjB,OAJAC,qBAAU,WACN9F,Ebac,uCAAM,WAAOA,GAAP,eAAAoJ,EAAA,+EAEG7K,IAFH,OAGa,KAD3B6N,EAFc,QAGPnG,KAAKmB,WACdpH,EAASf,GAAc,IAEvBe,EAASH,EAAcuM,EAASnG,KAAKqB,SAAS,KAElDtH,EAASJ,GAAmB,IARR,gDAUpBI,EAASJ,GAAmB,IAVR,yDAAN,yDaZf,CAACI,IAECN,EAID,uBAAK6F,UAAU,MAAf,UACQ,eAAC,GAAD,CAAcxG,WAAYA,IACd,YAAXS,GAAwB,eAAC6M,EAAA,EAAD,CAAgBrJ,MAAM,cACnD,eAACsJ,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACQ,gBAAC,KAAD,WACI,eAAC,KAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,OAAQ,kBAAM,eAAC,GAAD,OACtC,eAAC,KAAD,CAAOD,KAAM,SAAUC,OAAQ,kBAAM,eAAC,GAAD,OACrC,eAAC,KAAD,CAAOD,KAAM,OAAQC,OAAQ,kBACzB,qBAAI7I,MAAO,CAAC6C,UAAW,SAAU1D,MAAO,UAAW6D,WAAY,SAA/D,0BACJ,eAAC,KAAD,CAAU8F,KAAM,IAAKrE,GAAI,cAGrC,eAACE,GAAD,OAfG,eAAC,GAAD,K,kBChBToE,GAAcC,aAAgB,CAChC5L,MAAOU,EACPqF,UAAWjG,EACX0H,IAAK3I,EACLoH,KAAM7H,IAGGyN,GAAQC,YAAe,CAChCzN,QAASsN,GACTI,WAAY,SAAAC,GAAoB,OAAIA,IAAuBC,QAAQC,SAOvEC,OAAON,MAAQA,GCffO,IAASX,OACL,eAAC,IAAMY,WAAP,UACI,eAAC,KAAD,UACA,eAAC,IAAD,CAAUR,MAAOA,GAAjB,SACI,eAAC,GAAD,UAIRS,SAASC,eAAe,SAM5B3Q,K,mBCtBA4Q,EAAOC,QAAU,CAAC,eAAiB,8BAA8B,SAAW,wBAAwB,KAAO,sB,mBCA3GD,EAAOC,QAAU,CAAC,eAAiB,iCAAiC,cAAgB,kC,mBCApFD,EAAOC,QAAU,CAAC,QAAU,8BAA8B,SAAW,iC,mBCArED,EAAOC,QAAU,CAAC,UAAY,6B","file":"static/js/main.7e57d4be.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '4f348a4d-b27b-44e2-b016-551b13e8fd56'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todoListsAPI = {\r\n    getTodoLists() {\r\n        return instance.get<TodoListType[]>('todo-lists');\r\n    },\r\n    createTodoList(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodoList(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodoList(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fd7ee122-ff59-4cee-b5b0-6226ee5b433c'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post('auth/login', {email: email, password: password, rememberMe: rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/login')\r\n    },\r\n    authMe() {\r\n        return instance.get(`auth/me`)\r\n    }\r\n}","import {authAPI} from \"../api/auth-api\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AppDispatch} from \"./store\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedIn(state, action:PayloadAction<boolean>) {\r\n            state.isLoggedIn = action.payload\r\n        },\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedIn} = slice.actions\r\n\r\n//thunk\r\nexport const logOut = () => async (dispatch: AppDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const logout = await authAPI.logout()\r\n    if (logout.data.resultCode === 0) {\r\n        dispatch(setIsLoggedIn(false))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } else {\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\nexport const logIn = (values: UserLoginData) => async (dispatch: AppDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const login = await authAPI.login(values.email,values.password,values.rememberMe)\r\n    if (login.data.resultCode === 0) {\r\n        dispatch(setIsLoggedIn(true))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } else {\r\n        dispatch(setAppErrorAC(login.data.messages[0]))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\n//types\r\nexport type UserLoginData = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}","import {authAPI} from \"../api/auth-api\";\r\nimport {setIsLoggedIn} from \"./auth-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AppDispatch} from \"./store\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as null | string,\r\n    isInitialized: false,\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state,action:PayloadAction<RequestStatusType>) {\r\n            state.status = action.payload\r\n        },\r\n        setIsInitializedAC(state,action:PayloadAction<boolean>) {\r\n            state.isInitialized = action.payload\r\n        },\r\n        setAppErrorAC(state,action:PayloadAction<string|null>) {\r\n            state.error = action.payload\r\n        },\r\n    }\r\n})\r\n\r\n//action creators\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC, setIsInitializedAC, setAppErrorAC} = slice.actions\r\n//thunk\r\nexport const authMe = () => async (dispatch: AppDispatch) => {\r\n    try {\r\n        const response = await authAPI.authMe()\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn(true))\r\n        } else {\r\n            dispatch(setAppErrorAC(response.data.messages[0]))\r\n        }\r\n        dispatch(setIsInitializedAC(true))\r\n    } catch (error) {\r\n        dispatch(setIsInitializedAC(true))\r\n    }\r\n}\r\n\r\n//types for error handler\r\nexport type SetAppStatusAT = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorAT = ReturnType<typeof setAppErrorAC>\r\n//type for test\r\nexport type InitAppStateType = typeof initialState\r\n\r\n","import {setAppErrorAC, SetAppErrorAT, setAppStatusAC, SetAppStatusAT} from \"../store/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const serverErrorHandler = (error: any, dispatch: Dispatch<SetAppStatusAT | SetAppErrorAT>) => {\r\n    dispatch(setAppStatusAC('failed'))\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n}","import {todoListsAPI, TodoListType} from '../api/todolists-api'\r\nimport {RequestStatusType, setAppStatusAC} from \"./app-reducer\";\r\nimport {serverErrorHandler} from \"../utils/error-handlers\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AppDispatch} from \"./store\";\r\n\r\nconst initialState: Array<TodoListDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todoLists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        addTodoListAC(state,action:PayloadAction<TodoListType>) {\r\n            state.unshift({...action.payload, filter: 'all', status: 'idle'})\r\n        },\r\n        removeTodoListAC(state,action:PayloadAction<{id: string}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        setTodoListsAC(state,action:PayloadAction<TodoListType[]>) {\r\n            return action.payload.map(tl => ({...tl, filter: 'all', status: 'idle'}))\r\n        },\r\n        changeTodoListTitleAC(state,action:PayloadAction<{id: string, title: string}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodoListFilterAC(state,action:PayloadAction<{id: string, filter: FilterValuesType}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        setTodoListStatusAC(state,action:PayloadAction<{id: string, status: RequestStatusType}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].status = action.payload.status\r\n        },\r\n    }\r\n})\r\n\r\n// actions\r\nexport const todoListsReducer = slice.reducer\r\nexport const {addTodoListAC,removeTodoListAC,setTodoListsAC,\r\n    changeTodoListFilterAC,setTodoListStatusAC,changeTodoListTitleAC} = slice.actions\r\n//thunk\r\nexport const fetchTodoListsTC = () => {\r\n    return (dispatch: AppDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todoListsAPI.getTodoLists()\r\n            .then((res) => {\r\n                dispatch(setTodoListsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((e) => {\r\n                serverErrorHandler(e,dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodoListTC = (todolistId: string) => {\r\n    return (dispatch: AppDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(setTodoListStatusAC({id: todolistId,status: 'loading'}))\r\n        todoListsAPI.deleteTodoList(todolistId)\r\n            .then(() => {\r\n                dispatch(removeTodoListAC({id: todolistId}))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((e) => {\r\n                serverErrorHandler(e,dispatch)\r\n                dispatch(setTodoListStatusAC({id: todolistId,status: 'failed'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodoListTC = (title: string) => {\r\n    return (dispatch: AppDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todoListsAPI.createTodoList(title)\r\n            .then((res) => {\r\n                dispatch(addTodoListAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((e) => {\r\n                serverErrorHandler(e,dispatch)\r\n            })\r\n    }\r\n}\r\nexport const changeTodoListTitleTC = (id: string, title: string) => {\r\n    return (dispatch: AppDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(setTodoListStatusAC({id,status:'loading'}))\r\n        todoListsAPI.updateTodoList(id, title)\r\n            .then(() => {\r\n                dispatch(changeTodoListTitleAC({id, title}))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setTodoListStatusAC({id,status: 'succeeded'}))\r\n            })\r\n            .catch((e) => {\r\n                serverErrorHandler(e,dispatch)\r\n                dispatch(setTodoListStatusAC({id,status: 'failed'}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodoListDomainType = TodoListType & {\r\n    status: RequestStatusType\r\n    filter: FilterValuesType\r\n}\r\n\r\n\r\n\r\n","import {\r\n    addTodoListAC, removeTodoListAC, setTodoListsAC,\r\n    setTodoListStatusAC\r\n} from './todolists-reducer'\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todoListsAPI,\r\n     UpdateTaskModelType\r\n} from '../api/todolists-api'\r\nimport {AppDispatch, AppRootStateType} from './store'\r\nimport {setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\nimport {serverErrorHandler} from \"../utils/error-handlers\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1);\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<TaskType>) {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model};\r\n            }        },\r\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodoListAC, (state, action) => {\r\n            state[action.payload.id] = []\r\n        })\r\n        builder.addCase(removeTodoListAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(setTodoListsAC, (state, action) => {\r\n            action.payload.forEach(tl => state[tl.id] = [])\r\n        })\r\n    }\r\n})\r\n\r\n// actions\r\nexport const tasksReducer = slice.reducer\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: AppDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todoListsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC({tasks, todolistId})\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((e) => {\r\n            serverErrorHandler(e, dispatch)\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: AppDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(setTodoListStatusAC({id: todolistId, status: 'loading'}))\r\n    todoListsAPI.deleteTask(todolistId, taskId)\r\n        .then(() => {\r\n            dispatch(removeTaskAC({taskId, todolistId}))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setTodoListStatusAC({id: todolistId, status: 'succeeded'}))\r\n        })\r\n        .catch((e) => {\r\n            serverErrorHandler(e, dispatch)\r\n            dispatch(setTodoListStatusAC({id: todolistId, status: 'failed'}))\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: AppDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(setTodoListStatusAC({id: todolistId, status: 'loading'}))\r\n    todoListsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setTodoListStatusAC({id: todolistId, status: 'succeeded'}))\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    serverErrorHandler(res.data.messages[0], dispatch)\r\n                    dispatch(setTodoListStatusAC({id: todolistId, status: 'failed'}))\r\n                }\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            serverErrorHandler(e, dispatch)\r\n            dispatch(setTodoListStatusAC({id: todolistId, status: 'failed'}))\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: AppDispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(setTodoListStatusAC({id: todolistId, status: 'loading'}))\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            dispatch(setAppErrorAC('task not found'))\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...model\r\n        }\r\n        todoListsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(() => {\r\n                const action = updateTaskAC({taskId, model, todolistId})\r\n                dispatch(action)\r\n            })\r\n            .catch((e) => {\r\n                serverErrorHandler(e, dispatch)\r\n            })\r\n        dispatch(setAppStatusAC('succeeded'))\r\n        dispatch(setTodoListStatusAC({id: todolistId, status: 'succeeded'}))\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport { IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n\r\n    const [title, setTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n    const addButtonStyle = props.disabled ? {color: 'grey'} : {color: 'green'}\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton style={addButtonStyle} onClick={addItem} disabled={props.disabled}>\r\n            <AddBox fontSize='large'/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n\r\n//types\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled: boolean\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\nimport {RequestStatusType} from \"../../../../store/app-reducer\";\r\nimport s from '../Todolist.module.css'\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n    const disabled = props.listStatus === 'loading'\r\n    const deleteButtonStyle = disabled ? {color: 'grey'} : {color: 'darkred'}\r\n    const checkboxStyle = disabled ? {color: 'grey'} : {color: 'green'}\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={s.taskContainer}>\r\n        <span>\r\n            <Checkbox\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                style={checkboxStyle}\r\n                onChange={onChangeHandler}\r\n                disabled={disabled}\r\n            />\r\n\r\n            <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        </span>\r\n        <IconButton onClick={onClickHandler}\r\n                    disabled={disabled}\r\n                    style={deleteButtonStyle}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n\r\n//types\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    listStatus: RequestStatusType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodoListDomainType} from '../../../store/todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../../../store/tasks-reducer'\r\nimport s from './Todolist.module.css'\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.tl.id)\r\n        dispatch(thunk)\r\n    }, [dispatch, props.tl.id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.tl.id)\r\n    }, [props.addTask, props.tl.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.tl.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.tl.id, title)\r\n    }, [props.tl.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.tl.id), [props.tl.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.tl.id), [props.tl.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.tl.id), [props.tl.id, props.changeFilter])\r\n\r\n    const disabled = props.tl.status === 'loading'\r\n    const deleteButtonStyle = disabled ? {color: 'grey'} : {color: 'darkred'}\r\n\r\n    let tasksForTodoList = props.tasks\r\n    if (props.tl.filter === 'active') {\r\n        tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.tl.filter === 'completed') {\r\n        tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3 style={{textAlign: 'center'}}>\r\n            <EditableSpan value={props.tl.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}\r\n                        disabled={disabled}\r\n                        style={deleteButtonStyle}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={disabled}/>\r\n        <div className={s.tasksContainer}>\r\n            {\r\n                tasksForTodoList.map(t => <Task key={t.id} task={t} todolistId={props.tl.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                                                listStatus={props.tl.status && props.tl.status}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.tl.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n                    disabled={disabled}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.tl.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}\r\n                    disabled={disabled}\r\n            >Active\r\n            </Button>\r\n            <Button variant={props.tl.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}\r\n                    disabled={disabled}\r\n            >Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n//types\r\ntype PropsType = {\r\n    tl: TodoListDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n\r\n}\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../store/store'\r\nimport {\r\n    addTodoListTC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleTC,\r\n    fetchTodoListsTC,\r\n    FilterValuesType,\r\n    removeTodoListTC, TodoListDomainType,\r\n} from '../../store/todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from '../../store/tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const TodoLists: React.FC = () => {\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTodoListsTC()\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch,])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (filter: FilterValuesType, todolistId: string) {\r\n        const action = changeTodoListFilterAC({id: todolistId, filter})\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodoListTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodoListTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodoListTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist} disabled={false}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todoLists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper elevation={10}\r\n                               style={{padding: '10px', backgroundColor: 'rgba(255,255,255,0.6)'}}>\r\n                            <Todolist\r\n                                tl={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {setAppErrorAC} from \"../../store/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.app.error)\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n  //      setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\n","import {AppBar, Button, IconButton, Menu, MenuItem, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {KeyboardArrowDown} from \"@material-ui/icons\";\r\nimport React, {useCallback} from \"react\";\r\nimport s from './CustomAppBar.module.css'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {logOut} from \"../../store/auth-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nexport const CustomAppBar = (props: CustomAppBarPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const logout = useCallback(() => {\r\n        dispatch(logOut())\r\n    }, [dispatch])\r\n\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const open = Boolean(anchorEl);\r\n    const handleClick = (e: any) => {\r\n        setAnchorEl(e.currentTarget && e.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return <AppBar position=\"static\" style={{background: 'green'}}>\r\n        <Toolbar className={s.appMenu}>\r\n            <div>\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                <KeyboardArrowDown id=\"basic-button\"\r\n                                   aria-controls=\"basic-menu\"\r\n                                   aria-haspopup=\"true\"\r\n                                   aria-expanded={open ? 'true' : undefined}\r\n                                   onClick={handleClick}/>\r\n                <Menu\r\n                    id=\"basic-menu\"\r\n                    anchorEl={anchorEl}\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    MenuListProps={{\r\n                        'aria-labelledby': 'basic-button',\r\n                    }}\r\n                >\r\n                    <MenuItem >\r\n                        <NavLink to={'/'} className={s.menuLink}>{`My Planner`}</NavLink></MenuItem>\r\n                </Menu>\r\n            </IconButton>\r\n            </div>\r\n            <Typography variant=\"h5\">\r\n                {'My Planner'}\r\n            </Typography>\r\n            {props.isLoggedIn\r\n                ? <Button color={\"inherit\"} variant={\"outlined\"} onClick={logout}>\r\n                    Log out\r\n                </Button>\r\n                : <div></div>}\r\n        </Toolbar>\r\n    </AppBar>\r\n}\r\n\r\ntype CustomAppBarPropsType = {\r\n    isLoggedIn: boolean\r\n}\r\n","import React from \"react\";\r\nimport {Button, Checkbox, Paper} from \"@material-ui/core\";\r\nimport {Field, FormikProvider, useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {logIn} from \"../../store/auth-reducer\";\r\nimport s from './Login.module.css'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const {isLoggedIn} = useSelector((state: AppRootStateType) => state.auth)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: LoginErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(logIn(values))\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n    return (\r\n        <FormikProvider value={formik}>\r\n            <div style={{display: \"flex\",justifyContent: \"space-around\"}}>\r\n                <Paper className={s.loginContainer}\r\n                       elevation={10}>\r\n                    <h2 style={{color: 'darkGreen'}}> Login </h2>\r\n\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <div className={s.formItem}>\r\n                            <label htmlFor=\"email\">Email</label><br/>\r\n                            <Field\r\n                                type='email'\r\n                                placeholder='E-mail'\r\n                                error={formik.touched.email ? formik.errors.email : null}\r\n                                name='email'\r\n                            /></div>\r\n                        <div className={s.formItem}>\r\n                            <label htmlFor=\"password\">Password</label><br/>\r\n                            <Field\r\n                                type='password'\r\n                                placeholder='Password'\r\n                                error={formik.touched.password ? formik.errors.password : null}\r\n                                name={'password'}\r\n                            /></div>\r\n                        <div>\r\n                            <Checkbox name='rememberMe' style={{color: 'green'}}/>\r\n                            Remember me\r\n                        </div>\r\n                        <Button type='submit' style={{color: 'green'}} variant='outlined'>\r\n                            Login\r\n                        </Button>\r\n                        <div className={s.free}>\r\n                            To log in get registered <a href='https://social-network.samuraijs.com/' target='_blank'>here</a><br/>\r\n                            or use common test account credentials: <br/>\r\n                            Email: <span style={{color: 'black'}}>free@samuraijs.com</span> <br/>\r\n                            Password: <span style={{color: 'black'}}>free</span>\r\n                        </div>\r\n                    </form>\r\n                </Paper>\r\n            </div>\r\n        </FormikProvider>\r\n    )\r\n}\r\n\r\n//types\r\ntype LoginErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}","import React from \"react\";\r\nimport s from './Loader.module.css';\r\n\r\nexport const Loader = () => {\r\n    return <div className={s.ldsCircle}>\r\n        <div></div>\r\n    </div>\r\n}","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {Container, LinearProgress} from '@material-ui/core'\r\nimport {TodoLists} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../store/store\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {CustomAppBar} from \"../components/CustomAppBar/CustomAppBar\";\r\nimport {authMe} from \"../store/app-reducer\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from \"../components/Login/Login\";\r\nimport {Loader} from \"../components/Loader/Loader\";\r\n\r\nfunction App() {\r\n\r\n    const {status, isInitialized} = useSelector((state: AppRootStateType) => state.app)\r\n    const isLoggedIn = useSelector((state: AppRootStateType) => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(authMe())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <Loader/>\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n                <CustomAppBar isLoggedIn={isLoggedIn}/>\r\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n            <Container fixed>\r\n                    <Switch>\r\n                        <Route exact path={\"/\"} render={() => <TodoLists/>}/>\r\n                        <Route path={\"/login\"} render={() => <Login/>}/>\r\n                        <Route path={\"/404\"} render={() =>\r\n                            <h1 style={{textAlign: 'center', color: 'darkred', paddingTop: '100px'}}>404 Error</h1>}/>\r\n                        <Redirect from={\"*\"} to={\"/404\"}/>\r\n                    </Switch>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    )\r\n}\r\nexport default App\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todoListsReducer} from './todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n});\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './store/store';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"Login_loginContainer__3lCCv\",\"formItem\":\"Login_formItem__QWWIz\",\"free\":\"Login_free__g0Kth\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tasksContainer\":\"Todolist_tasksContainer__2Kisn\",\"taskContainer\":\"Todolist_taskContainer__wGU3P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appMenu\":\"CustomAppBar_appMenu__NS_Tb\",\"menuLink\":\"CustomAppBar_menuLink__32fsN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsCircle\":\"Loader_ldsCircle__3Ja2e\"};"],"sourceRoot":""}