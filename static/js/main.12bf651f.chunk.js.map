{"version":3,"sources":["api/todolists-api.ts","AddItemForm.tsx","EditableSpan.tsx","state/tasks-reducer.ts","Task.tsx","state/todolists-reducer.ts","Todolist.tsx","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","id","delete","todolistId","taskId","taskTitile","model","put","initialState","changeTaskStatusAC","status","type","changeTaskTitleAC","Task","dispatch","useDispatch","onClickHandler","useCallback","removeTask","task","onChangeHandler","checked","getState","tasks","find","t","startDate","priority","description","deadline","then","action","updateTaskStatusTC","onTitleChangeHandler","newValue","className","Completed","Checkbox","Delete","changeTodolistTitleAC","createTodolistThunk","resp","data","resultCode","v1","addTodolistAC","Todolist","useEffect","res","setTasksAC","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","New","removeTodolistAC","map","changeTaskTitle","changeTaskStatus","style","paddingTop","Button","App","todolists","useSelector","state","removeTaskAC","RemoveTaskTC","taskTitle","item","AddTaskTC","changeStatus","newTitle","addTodolist","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","stateCopy","newTasks","todolistTasks","newTasksArray","copyState","forEach","todoListId","addedDate","order","todolist","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12bf651f.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fd7ee122-ff59-4cee-b5b0-6226ee5b433c'\r\n    }\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n        },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import {TasksStateType} from '../App';\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from './todolists-reducer';\r\nimport {TaskStatuses, TaskType, todolistsAPI, TodolistType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    status: TaskStatuses\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\nexport type SetTodolistsActionType = {\r\n    type: 'SET-TODOLISTS'\r\n    todolists: Array<TodolistType>\r\n}\r\nexport type SetTasksActionType = {\r\n    type: 'SET-TASKS'\r\n    tasks: Array<TaskType>\r\n    todolistId: string\r\n}\r\n\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType | SetTasksActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n                case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, status: action.status} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'SET-TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (todolistId: string, taskId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', status, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string): SetTasksActionType => {\r\n    return {type: 'SET-TASKS', tasks, todolistId}\r\n}\r\n\r\n\r\n// thunk\r\n\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC(tasks, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const RemoveTaskTC = (todolistId: string, id: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId,id)\r\n        .then(() => {\r\n            const action = removeTaskAC(todolistId, id);\r\n            dispatch(action);})\r\n}\r\nexport const AddTaskTC = (todolistId: string, taskTitle: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.createTask(todolistId, taskTitle)\r\n        .then((resp) => {\r\n            const action = addTaskAC(resp.data.data.item);\r\n            dispatch(action);})\r\n}\r\nexport const updateTaskStatusTC = (taskId: string, todolistId: string, status: TaskStatuses) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n\r\n        if (task) {\r\n            todolistsAPI.updateTask(todolistId, taskId, {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: status\r\n            }).then(() => {\r\n                const action = changeTaskStatusAC(taskId, status, todolistId)\r\n                dispatch(action)\r\n            })\r\n        }\r\n    }\r\n}\r\nexport const updateTaskTitleThunk = (taskId: string, todolistId: string, title: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n\r\n        if (task) {\r\n            todolistsAPI.updateTask(todolistId, taskId, {\r\n                title: title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.status\r\n            }).then(() => {\r\n                const action = changeTaskTitleAC(todolistId, taskId, title)\r\n                dispatch(action)\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\nimport {updateTaskStatusTC, updateTaskTitleThunk} from \"./state/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onClickHandler = useCallback(() => props.removeTask(props.todolistId, props.task.id), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let status = e.currentTarget.checked ? 2 : 0\r\n        dispatch(updateTaskStatusTC(props.task.id, props.todolistId, status))\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        dispatch(updateTaskTitleThunk(props.todolistId, props.task.id, newValue))\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {v1} from 'uuid';\r\nimport {todolistsAPI, TodolistType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\nexport type SetTodolistsActionType = {\r\n    type: 'SET-TODOLISTS'\r\n    todolists: Array<TodolistType>\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType | SetTodolistsActionType\r\n\r\nconst initialState: Array<TodolistDomainType> =  [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n    {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\r\n]\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all',\r\n                addedDate: '',\r\n                order: 0\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => ({\r\n                ...tl,\r\n                filter: 'all'\r\n            }))\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>): SetTodolistsActionType => {\r\n    return {type: 'SET-TODOLISTS', todolists}\r\n}\r\n\r\n// thunk\r\n\r\nexport const fetchTodolistsThunk = () => (dispatch: Dispatch) => {\r\n    todolistsAPI.getTodolists()\r\n        .then((resp) => {\r\n            dispatch(setTodolistsAC(resp.data))\r\n        })\r\n}\r\nexport const deleteTodolistThunk = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then((resp) => {\r\n            if (resp.data.resultCode === 0) {\r\n                dispatch(removeTodolistAC(todolistId))\r\n            }\r\n        })\r\n}\r\nexport const createTodolistThunk = (title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.createTodolist(title)\r\n        .then(resp => {\r\n            if (resp.data.resultCode === 0) {\r\n                dispatch(addTodolistAC(title))\r\n            }\r\n        })\r\n}\r\nexport const updateTodolistTitleThunk = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.updateTodolist(todolistId, title)\r\n        .then(resp => {\r\n            if (resp.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC(todolistId, title))\r\n            }\r\n        })\r\n}\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\nimport {deleteTodolistThunk, FilterValuesType, updateTodolistTitleThunk} from './state/todolists-reducer'\r\nimport {fetchTasksTC} from \"./state/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        dispatch(deleteTodolistThunk(props.id))\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        updateTodolistTitleThunk(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC, createTodolistThunk, fetchTodolistsThunk,\r\n    FilterValuesType,\r\n    TodolistDomainType\r\n} from './state/todolists-reducer'\r\nimport {\r\n    AddTaskTC,\r\n    changeTaskStatusAC,\r\n    changeTaskTitleAC,\r\n    RemoveTaskTC\r\n} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsThunk())\r\n    },[])\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback(function (todolistId: string, id: string) {\r\n        dispatch(RemoveTaskTC(todolistId, id))\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(AddTaskTC(todolistId, title))\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const action = changeTaskStatusAC(id, status, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const action = changeTodolistTitleAC(id, title);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodolistThunk(title));\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './state/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}